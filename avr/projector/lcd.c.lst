
lcd.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f6  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000022a  2**0
                  ALLOC
  3 .stab         00000d98  00000000  00000000  0000022c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000a46  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
   0:	12 9a       	sbi	0x02, 2	; 2
    lcd_e_delay();
   2:	00 c0       	rjmp	.+0      	; 0x4 <toggle_e+0x4>
    lcd_e_low();
   4:	12 98       	cbi	0x02, 2	; 2
   6:	08 95       	ret

00000008 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
   c:	66 23       	and	r22, r22
   e:	01 f0       	breq	.+0      	; 0x10 <lcd_write+0x8>
       lcd_rs_high();
  10:	10 9a       	sbi	0x02, 0	; 2
  12:	00 c0       	rjmp	.+0      	; 0x14 <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  14:	10 98       	cbi	0x02, 0	; 2
    }
    lcd_rw_low();
  16:	11 98       	cbi	0x02, 1	; 2
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  18:	0b 9a       	sbi	0x01, 3	; 1
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  1a:	0c 9a       	sbi	0x01, 4	; 1
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  1c:	0d 9a       	sbi	0x01, 5	; 1
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  1e:	0e 9a       	sbi	0x01, 6	; 1
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  20:	16 98       	cbi	0x02, 6	; 2
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  22:	15 98       	cbi	0x02, 5	; 2
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  24:	14 98       	cbi	0x02, 4	; 2
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  26:	13 98       	cbi	0x02, 3	; 2
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  28:	87 fd       	sbrc	r24, 7
  2a:	16 9a       	sbi	0x02, 6	; 2
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  2c:	c8 2f       	mov	r28, r24
  2e:	dd 27       	eor	r29, r29
  30:	c6 fd       	sbrc	r28, 6
  32:	15 9a       	sbi	0x02, 5	; 2
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  34:	c5 fd       	sbrc	r28, 5
  36:	14 9a       	sbi	0x02, 4	; 2
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  38:	c4 fd       	sbrc	r28, 4
  3a:	13 9a       	sbi	0x02, 3	; 2
        lcd_e_toggle();
  3c:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  40:	16 98       	cbi	0x02, 6	; 2
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  42:	15 98       	cbi	0x02, 5	; 2
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  44:	14 98       	cbi	0x02, 4	; 2
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  46:	13 98       	cbi	0x02, 3	; 2
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  48:	c3 fd       	sbrc	r28, 3
  4a:	16 9a       	sbi	0x02, 6	; 2
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  4c:	c2 fd       	sbrc	r28, 2
  4e:	15 9a       	sbi	0x02, 5	; 2
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  50:	c1 fd       	sbrc	r28, 1
  52:	14 9a       	sbi	0x02, 4	; 2
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  54:	c0 fd       	sbrc	r28, 0
  56:	13 9a       	sbi	0x02, 3	; 2
        lcd_e_toggle();        
  58:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  5c:	13 9a       	sbi	0x02, 3	; 2
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  5e:	14 9a       	sbi	0x02, 4	; 2
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  60:	15 9a       	sbi	0x02, 5	; 2
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  62:	16 9a       	sbi	0x02, 6	; 2
  64:	df 91       	pop	r29
  66:	cf 91       	pop	r28
  68:	08 95       	ret

0000006a <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  6a:	88 23       	and	r24, r24
  6c:	01 f0       	breq	.+0      	; 0x6e <lcd_read+0x4>
        lcd_rs_high();                       /* RS=1: read data      */
  6e:	10 9a       	sbi	0x02, 0	; 2
  70:	00 c0       	rjmp	.+0      	; 0x72 <lcd_read+0x8>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  72:	10 98       	cbi	0x02, 0	; 2
    lcd_rw_high();                           /* RW=1  read mode      */
  74:	11 9a       	sbi	0x02, 1	; 2
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
  76:	0b 98       	cbi	0x01, 3	; 1
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
  78:	0c 98       	cbi	0x01, 4	; 1
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
  7a:	0d 98       	cbi	0x01, 5	; 1
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
  7c:	0e 98       	cbi	0x01, 6	; 1
                
        /* read high nibble first */
        lcd_e_high();
  7e:	12 9a       	sbi	0x02, 2	; 2
        lcd_e_delay();        
  80:	00 c0       	rjmp	.+0      	; 0x82 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
  82:	03 9b       	sbis	0x00, 3	; 0
  84:	00 c0       	rjmp	.+0      	; 0x86 <lcd_read+0x1c>
  86:	80 e1       	ldi	r24, 0x10	; 16
  88:	00 c0       	rjmp	.+0      	; 0x8a <lcd_read+0x20>
  8a:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
  8c:	04 99       	sbic	0x00, 4	; 0
  8e:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
  90:	05 99       	sbic	0x00, 5	; 0
  92:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
  94:	06 99       	sbic	0x00, 6	; 0
  96:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
  98:	12 98       	cbi	0x02, 2	; 2

        lcd_e_delay();                       /* Enable 500ns low       */
  9a:	00 c0       	rjmp	.+0      	; 0x9c <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
  9c:	12 9a       	sbi	0x02, 2	; 2
        lcd_e_delay();
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
  a0:	03 99       	sbic	0x00, 3	; 0
  a2:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
  a4:	04 99       	sbic	0x00, 4	; 0
  a6:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
  a8:	05 99       	sbic	0x00, 5	; 0
  aa:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
  ac:	06 99       	sbic	0x00, 6	; 0
  ae:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
  b0:	12 98       	cbi	0x02, 2	; 2
    }
    return data;
}
  b2:	99 27       	eor	r25, r25
  b4:	08 95       	ret

000000b6 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
  bc:	87 fd       	sbrc	r24, 7
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_waitbusy+0xa>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
  c0:	84 e0       	ldi	r24, 0x04	; 4
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	01 f4       	brne	.+0      	; 0xc8 <lcd_waitbusy+0x12>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
    
}/* lcd_waitbusy */
  ce:	99 27       	eor	r25, r25
  d0:	08 95       	ret

000000d2 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
  d2:	1f 93       	push	r17
  d4:	18 2f       	mov	r17, r24
    lcd_waitbusy();
  d6:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
    lcd_write(cmd,0);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	81 2f       	mov	r24, r17
  de:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
  e2:	1f 91       	pop	r17
  e4:	08 95       	ret

000000e6 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
  e6:	1f 93       	push	r17
  e8:	18 2f       	mov	r17, r24
    lcd_waitbusy();
  ea:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
    lcd_write(data,1);
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	81 2f       	mov	r24, r17
  f2:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
  f6:	1f 91       	pop	r17
  f8:	08 95       	ret

000000fa <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
  fa:	66 23       	and	r22, r22
  fc:	01 f4       	brne	.+0      	; 0xfe <lcd_gotoxy+0x4>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
  fe:	80 58       	subi	r24, 0x80	; 128
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_gotoxy+0x8>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 102:	80 54       	subi	r24, 0x40	; 64
 104:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
 108:	08 95       	ret

0000010a <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 10a:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
}
 10e:	99 27       	eor	r25, r25
 110:	08 95       	ret

00000112 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
 118:	08 95       	ret

0000011a <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
 120:	08 95       	ret

00000122 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 122:	1f 93       	push	r17
 124:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 126:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
    if (c=='\n')
 12a:	1a 30       	cpi	r17, 0x0A	; 10
 12c:	01 f4       	brne	.+0      	; 0x12e <lcd_putc+0xc>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 12e:	80 34       	cpi	r24, 0x40	; 64
 130:	00 f4       	brcc	.+0      	; 0x132 <lcd_putc+0x10>
 132:	80 e4       	ldi	r24, 0x40	; 64
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcd_putc+0x14>
 136:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 138:	80 58       	subi	r24, 0x80	; 128
 13a:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_putc+0x1e>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	81 2f       	mov	r24, r17
 144:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
 148:	1f 91       	pop	r17
 14a:	08 95       	ret

0000014c <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_puts+0x8>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 154:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 158:	89 91       	ld	r24, Y+
 15a:	88 23       	and	r24, r24
 15c:	01 f4       	brne	.+0      	; 0x15e <lcd_puts+0x12>
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_puts_p+0x8>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 16c:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
 170:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	84 91       	lpm	r24, Z
 176:	88 23       	and	r24, r24
 178:	01 f4       	brne	.+0      	; 0x17a <lcd_puts_p+0x16>
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	f8 2e       	mov	r15, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 188:	08 9a       	sbi	0x01, 0	; 1
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 18a:	09 9a       	sbi	0x01, 1	; 1
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 18c:	0a 9a       	sbi	0x01, 2	; 1
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 18e:	0b 9a       	sbi	0x01, 3	; 1
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 190:	0c 9a       	sbi	0x01, 4	; 1
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 192:	0d 9a       	sbi	0x01, 5	; 1
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 194:	0e 9a       	sbi	0x01, 6	; 1
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	9d e7       	ldi	r25, 0x7D	; 125
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	01 f4       	brne	.+0      	; 0x19e <lcd_init+0x1e>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 19e:	14 9a       	sbi	0x02, 4	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1a0:	13 9a       	sbi	0x02, 3	; 2
    lcd_e_toggle();
 1a2:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	97 e2       	ldi	r25, 0x27	; 39
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	01 f4       	brne	.+0      	; 0x1ae <lcd_init+0x2e>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1ae:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b2:	00 e8       	ldi	r16, 0x80	; 128
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	c8 01       	movw	r24, r16
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	01 f4       	brne	.+0      	; 0x1bc <lcd_init+0x3c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1bc:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c0:	c8 01       	movw	r24, r16
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	01 f4       	brne	.+0      	; 0x1c6 <lcd_init+0x46>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1c6:	13 98       	cbi	0x02, 3	; 2
    lcd_e_toggle();
 1c8:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1cc:	c8 01       	movw	r24, r16
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	01 f4       	brne	.+0      	; 0x1d2 <lcd_init+0x52>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1d2:	88 e2       	ldi	r24, 0x28	; 40
 1d4:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
    lcd_clrscr();                           /* display clear                */ 
 1de:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1e8:	8f 2d       	mov	r24, r15
 1ea:	0e 94 00 00 	call	0	; 0x0 <toggle_e>
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	08 95       	ret
