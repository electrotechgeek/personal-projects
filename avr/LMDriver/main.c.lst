
main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000001  00000000  00000000  000000d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000000d5  2**0
                  ALLOC
  3 .debug_abbrev 000000e5  00000000  00000000  000000d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a9  00000000  00000000  000001ba  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000181  00000000  00000000  00000363  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000004e4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_loc    00000069  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000035  00000000  00000000  0000057d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_pubtypes 00000033  00000000  00000000  000005b2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  000005e5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_str    00000131  00000000  00000000  00000605  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <mosiPush>:

u08 disploop = 1;

void mosiPush(unsigned char data)
{
    mosiBuffer[mosiHead++] = data;
   0:	90 91 00 00 	lds	r25, 0x0000
   4:	e0 e0       	ldi	r30, 0x00	; 0
   6:	f0 e0       	ldi	r31, 0x00	; 0
   8:	e9 0f       	add	r30, r25
   a:	f1 1d       	adc	r31, r1
   c:	80 83       	st	Z, r24
   e:	9f 5f       	subi	r25, 0xFF	; 255
    mosiHead &= (MOSIBUFFERSIZE - 1);
  10:	97 70       	andi	r25, 0x07	; 7
  12:	90 93 00 00 	sts	0x0000, r25
    spiEvent = 1;
  16:	81 e0       	ldi	r24, 0x01	; 1
  18:	80 93 00 00 	sts	0x0000, r24
}
  1c:	08 95       	ret

0000001e <main>:
    spiEvent = 1;
}
#endif

int main(void)
{
  1e:	cf 93       	push	r28
unsigned char count = 0;
    /* disable the watchdog */
    MCUSR = 0;
  20:	14 be       	out	0x34, r1	; 52
    wdt_disable();
  22:	88 e1       	ldi	r24, 0x18	; 24
  24:	0f b6       	in	r0, 0x3f	; 63
  26:	f8 94       	cli
  28:	80 93 60 00 	sts	0x0060, r24
  2c:	10 92 60 00 	sts	0x0060, r1
  30:	0f be       	out	0x3f, r0	; 63
    
    cmd_Init();			/* init command processor */
  32:	0e 94 00 00 	call	0	; 0x0 <mosiPush>
    dm_init();			/* init displaymux */
  36:	0e 94 00 00 	call	0	; 0x0 <mosiPush>
#ifndef DIAG
    spi_init();   	/* init serial peripheral interface */
  3a:	0e 94 00 00 	call	0	; 0x0 <mosiPush>
#endif // DIAG
    
    sei();
  3e:	78 94       	sei
}
#endif

int main(void)
{
unsigned char count = 0;
  40:	c0 e0       	ldi	r28, 0x00	; 0
    spiEvent = 1;
#endif // DIAG

    while (1)
    {
        count++;
  42:	cf 5f       	subi	r28, 0xFF	; 255
        {
            dataBit(2, 3); // test MOSI (PORTB 2), set LED Y
        }
#endif // DIAG

        if (spiEvent & !(count & 0x0f))
  44:	8c 2f       	mov	r24, r28
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	8f 70       	andi	r24, 0x0F	; 15
  4a:	90 70       	andi	r25, 0x00	; 0
  4c:	21 e0       	ldi	r18, 0x01	; 1
  4e:	30 e0       	ldi	r19, 0x00	; 0
  50:	00 97       	sbiw	r24, 0x00	; 0
  52:	01 f0       	breq	.+0      	; 0x54 <main+0x36>
  54:	20 e0       	ldi	r18, 0x00	; 0
  56:	30 e0       	ldi	r19, 0x00	; 0
  58:	80 91 00 00 	lds	r24, 0x0000
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	82 23       	and	r24, r18
  60:	93 23       	and	r25, r19
  62:	00 97       	sbiw	r24, 0x00	; 0
  64:	01 f0       	breq	.+0      	; 0x66 <main+0x48>
        {
            cli();
  66:	f8 94       	cli
            data = mosiBuffer[mosiTail++];
  68:	90 91 00 00 	lds	r25, 0x0000
  6c:	e9 2f       	mov	r30, r25
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	e0 50       	subi	r30, 0x00	; 0
  72:	f0 40       	sbci	r31, 0x00	; 0
  74:	80 81       	ld	r24, Z
  76:	9f 5f       	subi	r25, 0xFF	; 255
            mosiTail &= (MOSIBUFFERSIZE - 1);
  78:	97 70       	andi	r25, 0x07	; 7
  7a:	90 93 00 00 	sts	0x0000, r25
            if (mosiHead == mosiTail)
  7e:	20 91 00 00 	lds	r18, 0x0000
  82:	29 17       	cp	r18, r25
  84:	01 f4       	brne	.+0      	; 0x86 <main+0x68>
            {
                spiEvent = 0;
  86:	10 92 00 00 	sts	0x0000, r1
            }
            sei();
  8a:	78 94       	sei
            cmd_dataHandler(data);
  8c:	0e 94 00 00 	call	0	; 0x0 <mosiPush>
            continue;
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x74>
        }
        if (disploop)
  92:	80 91 00 00 	lds	r24, 0x0000
  96:	88 23       	and	r24, r24
  98:	01 f0       	breq	.+0      	; 0x9a <main+0x7c>
        {
            dm_timerHandler();
  9a:	0e 94 00 00 	call	0	; 0x0 <mosiPush>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <__SREG__+0x61>
