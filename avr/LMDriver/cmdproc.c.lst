
cmdproc.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00000000  00000000  000003a2  2**0
                  ALLOC
  3 .debug_abbrev 0000012a  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002d2  00000000  00000000  000004cc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000351  00000000  00000000  0000079e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .progmem.data 00000010  00000000  00000000  00000aef  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_frame  00000040  00000000  00000000  00000b00  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_loc    00000364  00000000  00000000  00000b40  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_pubnames 0000008c  00000000  00000000  00000ea4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_pubtypes 00000033  00000000  00000000  00000f30  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_aranges 00000020  00000000  00000000  00000f63  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_str    0000018d  00000000  00000000  00000f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <cmd_Init>:

extern u08 disploop;

void cmd_Init(void)
{
    command = 0;
   0:	10 92 00 00 	sts	0x0000, r1
    paramsRemaining = 0;
   4:	10 92 00 00 	sts	0x0000, r1
    paramIndex = 0;
   8:	10 92 00 00 	sts	0x0000, r1
}
   c:	08 95       	ret

0000000e <asciiToHex>:

u08 asciiToHex(u08 ascii1, u08 ascii2)
{
   e:	20 e0       	ldi	r18, 0x00	; 0
  10:	30 e0       	ldi	r19, 0x00	; 0
    u08 result = 0;
    u08 index;
    
    for (index = 0; index < 16; index++)
    {
        if (ascii1 == pgm_read_byte_near(hexTable + index))
  12:	f9 01       	movw	r30, r18
  14:	e0 50       	subi	r30, 0x00	; 0
  16:	f0 40       	sbci	r31, 0x00	; 0
  18:	e4 91       	lpm	r30, Z+
  1a:	8e 17       	cp	r24, r30
  1c:	01 f0       	breq	.+0      	; 0x1e <asciiToHex+0x10>
  1e:	2f 5f       	subi	r18, 0xFF	; 255
  20:	3f 4f       	sbci	r19, 0xFF	; 255
u08 asciiToHex(u08 ascii1, u08 ascii2)
{
    u08 result = 0;
    u08 index;
    
    for (index = 0; index < 16; index++)
  22:	20 31       	cpi	r18, 0x10	; 16
  24:	31 05       	cpc	r19, r1
  26:	01 f4       	brne	.+0      	; 0x28 <asciiToHex+0x1a>
    paramIndex = 0;
}

u08 asciiToHex(u08 ascii1, u08 ascii2)
{
    u08 result = 0;
  28:	20 e0       	ldi	r18, 0x00	; 0
        {
            result = index;
            break;
        }
    }
    result <<= 4;
  2a:	82 2f       	mov	r24, r18
  2c:	82 95       	swap	r24
  2e:	80 7f       	andi	r24, 0xF0	; 240
  30:	20 e0       	ldi	r18, 0x00	; 0
  32:	30 e0       	ldi	r19, 0x00	; 0
    for (index = 0; index < 16; index++)
    {
        if (ascii2 == pgm_read_byte_near(hexTable + index))
  34:	f9 01       	movw	r30, r18
  36:	e0 50       	subi	r30, 0x00	; 0
  38:	f0 40       	sbci	r31, 0x00	; 0
  3a:	e4 91       	lpm	r30, Z+
  3c:	6e 17       	cp	r22, r30
  3e:	01 f4       	brne	.+0      	; 0x40 <asciiToHex+0x32>
        {
            result |= index;
  40:	82 2b       	or	r24, r18
            break;
  42:	08 95       	ret
  44:	2f 5f       	subi	r18, 0xFF	; 255
  46:	3f 4f       	sbci	r19, 0xFF	; 255
            result = index;
            break;
        }
    }
    result <<= 4;
    for (index = 0; index < 16; index++)
  48:	20 31       	cpi	r18, 0x10	; 16
  4a:	31 05       	cpc	r19, r1
  4c:	01 f4       	brne	.+0      	; 0x4e <asciiToHex+0x40>
            break;
        }
    }
    return result;
    
}
  4e:	08 95       	ret

00000050 <cmd_dataHandler>:

void cmd_dataHandler(u08 input)
{
  50:	cf 93       	push	r28
  52:	df 93       	push	r29
    if (command)
  54:	c0 91 00 00 	lds	r28, 0x0000
  58:	cc 23       	and	r28, r28
  5a:	01 f4       	brne	.+0      	; 0x5c <cmd_dataHandler+0xc>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <cmd_dataHandler+0xe>
    {
        parameter[paramIndex++] = input;
  5e:	90 91 00 00 	lds	r25, 0x0000
  62:	e9 2f       	mov	r30, r25
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	e0 50       	subi	r30, 0x00	; 0
  68:	f0 40       	sbci	r31, 0x00	; 0
  6a:	80 83       	st	Z, r24
  6c:	9f 5f       	subi	r25, 0xFF	; 255
  6e:	90 93 00 00 	sts	0x0000, r25
        paramsRemaining--;
  72:	80 91 00 00 	lds	r24, 0x0000
  76:	81 50       	subi	r24, 0x01	; 1
  78:	80 93 00 00 	sts	0x0000, r24
        if (paramsRemaining)
  7c:	88 23       	and	r24, r24
  7e:	01 f0       	breq	.+0      	; 0x80 <cmd_dataHandler+0x30>
  80:	00 c0       	rjmp	.+0      	; 0x82 <cmd_dataHandler+0x32>
        {
            return;
        }
        u08 which = (parameter[0] == '0' ? 0 : 1);
  82:	60 91 00 00 	lds	r22, 0x0000
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	60 33       	cpi	r22, 0x30	; 48
  8a:	01 f4       	brne	.+0      	; 0x8c <cmd_dataHandler+0x3c>
  8c:	80 e0       	ldi	r24, 0x00	; 0
        switch (command & 0xdf)
  8e:	2c 2f       	mov	r18, r28
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	2f 7d       	andi	r18, 0xDF	; 223
  94:	30 70       	andi	r19, 0x00	; 0
  96:	2c 34       	cpi	r18, 0x4C	; 76
  98:	31 05       	cpc	r19, r1
  9a:	01 f4       	brne	.+0      	; 0x9c <cmd_dataHandler+0x4c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <cmd_dataHandler+0x4e>
  9e:	2d 34       	cpi	r18, 0x4D	; 77
  a0:	31 05       	cpc	r19, r1
  a2:	04 f4       	brge	.+0      	; 0xa4 <cmd_dataHandler+0x54>
  a4:	23 34       	cpi	r18, 0x43	; 67
  a6:	31 05       	cpc	r19, r1
  a8:	01 f4       	brne	.+0      	; 0xaa <cmd_dataHandler+0x5a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <cmd_dataHandler+0x5c>
  ac:	24 34       	cpi	r18, 0x44	; 68
  ae:	31 05       	cpc	r19, r1
  b0:	04 f4       	brge	.+0      	; 0xb2 <cmd_dataHandler+0x62>
  b2:	21 34       	cpi	r18, 0x41	; 65
  b4:	31 05       	cpc	r19, r1
  b6:	01 f0       	breq	.+0      	; 0xb8 <cmd_dataHandler+0x68>
  b8:	22 34       	cpi	r18, 0x42	; 66
  ba:	31 05       	cpc	r19, r1
  bc:	01 f0       	breq	.+0      	; 0xbe <cmd_dataHandler+0x6e>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <cmd_dataHandler+0x70>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <cmd_dataHandler+0x72>
  c2:	27 34       	cpi	r18, 0x47	; 71
  c4:	31 05       	cpc	r19, r1
  c6:	01 f4       	brne	.+0      	; 0xc8 <cmd_dataHandler+0x78>
  c8:	00 c0       	rjmp	.+0      	; 0xca <cmd_dataHandler+0x7a>
  ca:	29 34       	cpi	r18, 0x49	; 73
  cc:	31 05       	cpc	r19, r1
  ce:	01 f4       	brne	.+0      	; 0xd0 <cmd_dataHandler+0x80>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <cmd_dataHandler+0x82>
  d2:	26 34       	cpi	r18, 0x46	; 70
  d4:	31 05       	cpc	r19, r1
  d6:	01 f0       	breq	.+0      	; 0xd8 <cmd_dataHandler+0x88>
  d8:	00 c0       	rjmp	.+0      	; 0xda <cmd_dataHandler+0x8a>
  da:	00 c0       	rjmp	.+0      	; 0xdc <cmd_dataHandler+0x8c>
  dc:	22 35       	cpi	r18, 0x52	; 82
  de:	31 05       	cpc	r19, r1
  e0:	01 f4       	brne	.+0      	; 0xe2 <cmd_dataHandler+0x92>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <cmd_dataHandler+0x94>
  e4:	23 35       	cpi	r18, 0x53	; 83
  e6:	31 05       	cpc	r19, r1
  e8:	04 f4       	brge	.+0      	; 0xea <cmd_dataHandler+0x9a>
  ea:	2d 34       	cpi	r18, 0x4D	; 77
  ec:	31 05       	cpc	r19, r1
  ee:	01 f4       	brne	.+0      	; 0xf0 <cmd_dataHandler+0xa0>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <cmd_dataHandler+0xa2>
  f2:	20 35       	cpi	r18, 0x50	; 80
  f4:	31 05       	cpc	r19, r1
  f6:	01 f0       	breq	.+0      	; 0xf8 <cmd_dataHandler+0xa8>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <cmd_dataHandler+0xaa>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <cmd_dataHandler+0xac>
  fc:	24 35       	cpi	r18, 0x54	; 84
  fe:	31 05       	cpc	r19, r1
 100:	01 f4       	brne	.+0      	; 0x102 <cmd_dataHandler+0xb2>
 102:	00 c0       	rjmp	.+0      	; 0x104 <cmd_dataHandler+0xb4>
 104:	24 35       	cpi	r18, 0x54	; 84
 106:	31 05       	cpc	r19, r1
 108:	04 f4       	brge	.+0      	; 0x10a <cmd_dataHandler+0xba>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <cmd_dataHandler+0xbc>
 10c:	2a 35       	cpi	r18, 0x5A	; 90
 10e:	31 05       	cpc	r19, r1
 110:	01 f0       	breq	.+0      	; 0x112 <cmd_dataHandler+0xc2>
 112:	00 c0       	rjmp	.+0      	; 0x114 <cmd_dataHandler+0xc4>
 114:	00 c0       	rjmp	.+0      	; 0x116 <cmd_dataHandler+0xc6>
        {
            /* Set display 0 character - a<char> */
            /* Set display 1 character - A<char> */
        case 'A':
            dm_setChar((command == 'a' ? 0 : 1), parameter[0]); 
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	c1 36       	cpi	r28, 0x61	; 97
 11a:	01 f4       	brne	.+0      	; 0x11c <cmd_dataHandler+0xcc>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
            break;
 122:	00 c0       	rjmp	.+0      	; 0x124 <cmd_dataHandler+0xd4>

            /* Blank character - b<01> */
            /* Unblank character - b<01> */
        case 'B':
            dm_blank(which, (command == 'b' ? 1: 0));
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	c2 36       	cpi	r28, 0x62	; 98
 128:	01 f0       	breq	.+0      	; 0x12a <cmd_dataHandler+0xda>
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
            break;
 130:	00 c0       	rjmp	.+0      	; 0x132 <cmd_dataHandler+0xe2>
            
            /* Enable Custom character - c<01>  */
            /* Disable Custom character - C<01> */
        case 'C':
            dm_displayProgrammed(which, (command == 'c' ? 1 : 0)); 
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	c3 36       	cpi	r28, 0x63	; 99
 136:	01 f0       	breq	.+0      	; 0x138 <cmd_dataHandler+0xe8>
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
            break;
 13e:	00 c0       	rjmp	.+0      	; 0x140 <cmd_dataHandler+0xf0>
            
            /* Flip display - f<01> */
            /* Unflip display - F<01> */
        case 'F':
            dm_setFlip(which, (command == 'f' ? 0 : 1)); 
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	c6 36       	cpi	r28, 0x66	; 102
 144:	01 f4       	brne	.+0      	; 0x146 <cmd_dataHandler+0xf6>
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
            break;
 14c:	00 c0       	rjmp	.+0      	; 0x14e <cmd_dataHandler+0xfe>
        
            /* General Purpose Output: g<0-F> */
            /* Returns General Purpose Input via SPI */
        case 'G':
            which = asciiToHex(0, parameter[0]) << 3;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 154:	88 0f       	add	r24, r24
 156:	88 0f       	add	r24, r24
 158:	88 0f       	add	r24, r24
            unsigned char data = PORTD;
 15a:	2b b1       	in	r18, 0x0b	; 11
            data &= (0x87 | which);
 15c:	98 2f       	mov	r25, r24
 15e:	97 68       	ori	r25, 0x87	; 135
 160:	92 23       	and	r25, r18
            data |= which;
 162:	98 2b       	or	r25, r24
            PORTD = data;
 164:	9b b9       	out	0x0b, r25	; 11
            which = PINE & 0xc3;
 166:	8c b1       	in	r24, 0x0c	; 12
 168:	83 7c       	andi	r24, 0xC3	; 195
//            dm_setChar(0, pgm_read_byte_near(hexTable + ((which & 0xf0 )>> 4))); 
 //           dm_setChar(1, pgm_read_byte_near(hexTable + (which & 0x0f))); 
            miso_push(pgm_read_byte_near(hexTable + ((which & 0x03) | (which >> 4))));
 16a:	e8 2f       	mov	r30, r24
 16c:	e2 95       	swap	r30
 16e:	ef 70       	andi	r30, 0x0F	; 15
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	83 70       	andi	r24, 0x03	; 3
 176:	90 70       	andi	r25, 0x00	; 0
 178:	e8 2b       	or	r30, r24
 17a:	f9 2b       	or	r31, r25
 17c:	e0 50       	subi	r30, 0x00	; 0
 17e:	f0 40       	sbci	r31, 0x00	; 0
 180:	84 91       	lpm	r24, Z+
 182:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
            break;
 186:	00 c0       	rjmp	.+0      	; 0x188 <cmd_dataHandler+0x138>
            
            /* Invert display bits - i<01> */
            /* Uninvert display bits - I<01> */
        case 'I':
            dm_setReverse(which, (command == 'i' ? 1 : 0)); 
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	c9 36       	cpi	r28, 0x69	; 105
 18c:	01 f0       	breq	.+0      	; 0x18e <cmd_dataHandler+0x13e>
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
            break;
 194:	00 c0       	rjmp	.+0      	; 0x196 <cmd_dataHandler+0x146>
            /* Set Pallete Index for display 0- l<HH> */
            /* This is ignored for single-color displays */
            /* Set Pallete Index for display 1- L<HH> */
            /* This is ignored for single-color displays */
        case 'L':
            dm_setPalette((command == 'l' ? 0 : 1), 
 196:	86 2f       	mov	r24, r22
 198:	60 91 00 00 	lds	r22, 0x0000
 19c:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 1a0:	68 2f       	mov	r22, r24
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	cc 36       	cpi	r28, 0x6C	; 108
 1a6:	01 f4       	brne	.+0      	; 0x1a8 <cmd_dataHandler+0x158>
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                          asciiToHex(parameter[0], parameter[1]));
            break;
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <cmd_dataHandler+0x160>

            /* Mirror display - m<01> */
            /* Unmirror display M<01> */
        case 'M':
            dm_setMirror(which, (command == 'm' ? 1 : 0)); 
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	cd 36       	cpi	r28, 0x6D	; 109
 1b4:	01 f0       	breq	.+0      	; 0x1b6 <cmd_dataHandler+0x166>
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
            break;
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <cmd_dataHandler+0x16e>
            
            /* Copy character to custom character 0 - p<hex> */
            /* Copy character to custom character 1 - P<hex> */
        case 'P':
            dm_copyToCustom((command == 'p' ? 0 : 1), asciiToHex(parameter[0], parameter[1])); 
 1be:	86 2f       	mov	r24, r22
 1c0:	60 91 00 00 	lds	r22, 0x0000
 1c4:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 1c8:	68 2f       	mov	r22, r24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	c0 37       	cpi	r28, 0x70	; 112
 1ce:	01 f4       	brne	.+0      	; 0x1d0 <cmd_dataHandler+0x180>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
            break;
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <cmd_dataHandler+0x188>
            
            /* Roll matrix n row<s> - r<01><udlr><n> */
        case 'R': dm_roll(which,
 1d8:	40 91 00 00 	lds	r20, 0x0000
 1dc:	40 53       	subi	r20, 0x30	; 48
 1de:	60 91 00 00 	lds	r22, 0x0000
 1e2:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                          parameter[1],
                          parameter[2] - '0');
            break;
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <cmd_dataHandler+0x198>
            
            /* Shift matrix <n> rows  - s<01><udlr><n> */
        case 'S': dm_shift(which,
 1e8:	40 91 00 00 	lds	r20, 0x0000
 1ec:	40 53       	subi	r20, 0x30	; 48
 1ee:	60 91 00 00 	lds	r22, 0x0000
 1f2:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                           parameter[1],
                           parameter[2] - '0');
            break;
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <cmd_dataHandler+0x1a8>
            
            /* Turn on pixel in custom character - t<01><row><column> */
            /* Turn off pixel in custom character - T<01><row><column> */
        case 'T':
            dm_pixel(which, (command == 't' ? 1 : 0), parameter[1] - '0', parameter[2] - '0');
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	c4 37       	cpi	r28, 0x74	; 116
 1fc:	01 f0       	breq	.+0      	; 0x1fe <cmd_dataHandler+0x1ae>
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	40 91 00 00 	lds	r20, 0x0000
 204:	40 53       	subi	r20, 0x30	; 48
 206:	20 91 00 00 	lds	r18, 0x0000
 20a:	20 53       	subi	r18, 0x30	; 48
 20c:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
            break;
 210:	00 c0       	rjmp	.+0      	; 0x212 <cmd_dataHandler+0x1c2>
            /* Enable light sense - z<row><column> */
            /* Disable light sense - Z<row><column>*/
            /* columns 0-4: display 0 */
            /* columns 5-9: display 1 */
        case 'Z':
            dm_setsense('Z' == command ? 'X':  parameter[0] - '0',
 212:	ca 35       	cpi	r28, 0x5A	; 90
 214:	01 f0       	breq	.+0      	; 0x216 <cmd_dataHandler+0x1c6>
 216:	86 2f       	mov	r24, r22
 218:	80 53       	subi	r24, 0x30	; 48
 21a:	60 91 00 00 	lds	r22, 0x0000
 21e:	60 53       	subi	r22, 0x30	; 48
 220:	00 c0       	rjmp	.+0      	; 0x222 <cmd_dataHandler+0x1d2>
 222:	88 e5       	ldi	r24, 0x58	; 88
 224:	68 e5       	ldi	r22, 0x58	; 88
 226:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
                        'Z' == command ? 'X':  parameter[1] - '0');
            break;
 22a:	00 c0       	rjmp	.+0      	; 0x22c <cmd_dataHandler+0x1dc>
            
        default:
            /* Reset all transforms - !<01> */
            if ('!' == command)
 22c:	c1 32       	cpi	r28, 0x21	; 33
 22e:	01 f4       	brne	.+0      	; 0x230 <cmd_dataHandler+0x1e0>
            {
                dm_reset(which); 
 230:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 234:	00 c0       	rjmp	.+0      	; 0x236 <cmd_dataHandler+0x1e6>
            }
            /* Program custom character columns, display 0 - [01234]<HexHex> */
            else if (command >= '0' && command <= '4')
 236:	dc 2f       	mov	r29, r28
 238:	d0 53       	subi	r29, 0x30	; 48
 23a:	d5 30       	cpi	r29, 0x05	; 5
 23c:	00 f4       	brcc	.+0      	; 0x23e <cmd_dataHandler+0x1ee>
            {
                dm_progColumn(0, command - '0', asciiToHex(parameter[0], parameter[1])); 
 23e:	86 2f       	mov	r24, r22
 240:	60 91 00 00 	lds	r22, 0x0000
 244:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 248:	48 2f       	mov	r20, r24
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	6d 2f       	mov	r22, r29
 24e:	00 c0       	rjmp	.+0      	; 0x250 <cmd_dataHandler+0x200>
            }
            /* Program custom character columns, display 1 - [56789]<data> */
            else if (command >= '5' && command <= '9')
 250:	c5 53       	subi	r28, 0x35	; 53
 252:	c5 30       	cpi	r28, 0x05	; 5
 254:	00 f4       	brcc	.+0      	; 0x256 <cmd_dataHandler+0x206>
            {
                dm_progColumn(1, command -'5', asciiToHex(parameter[0], parameter[1])); 
 256:	86 2f       	mov	r24, r22
 258:	60 91 00 00 	lds	r22, 0x0000
 25c:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 260:	48 2f       	mov	r20, r24
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	6c 2f       	mov	r22, r28
 266:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
            }
        }
        command = 0;
 26a:	10 92 00 00 	sts	0x0000, r1
        paramIndex = 0;
 26e:	10 92 00 00 	sts	0x0000, r1
        return;
 272:	00 c0       	rjmp	.+0      	; 0x274 <cmd_dataHandler+0x224>
    }
    
    paramsRemaining = 0;
 274:	10 92 00 00 	sts	0x0000, r1
    paramIndex = 0;
 278:	10 92 00 00 	sts	0x0000, r1
    switch (input)
 27c:	82 35       	cpi	r24, 0x52	; 82
 27e:	01 f4       	brne	.+0      	; 0x280 <cmd_dataHandler+0x230>
 280:	00 c0       	rjmp	.+0      	; 0x282 <cmd_dataHandler+0x232>
 282:	83 35       	cpi	r24, 0x53	; 83
 284:	00 f4       	brcc	.+0      	; 0x286 <cmd_dataHandler+0x236>
 286:	84 34       	cpi	r24, 0x44	; 68
 288:	00 f4       	brcc	.+0      	; 0x28a <cmd_dataHandler+0x23a>
 28a:	81 34       	cpi	r24, 0x41	; 65
 28c:	00 f0       	brcs	.+0      	; 0x28e <cmd_dataHandler+0x23e>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <cmd_dataHandler+0x240>
 290:	8f 32       	cpi	r24, 0x2F	; 47
 292:	01 f4       	brne	.+0      	; 0x294 <cmd_dataHandler+0x244>
 294:	00 c0       	rjmp	.+0      	; 0x296 <cmd_dataHandler+0x246>
 296:	80 33       	cpi	r24, 0x30	; 48
 298:	00 f4       	brcc	.+0      	; 0x29a <cmd_dataHandler+0x24a>
 29a:	8a 32       	cpi	r24, 0x2A	; 42
 29c:	01 f4       	brne	.+0      	; 0x29e <cmd_dataHandler+0x24e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <cmd_dataHandler+0x250>
 2a0:	8b 32       	cpi	r24, 0x2B	; 43
 2a2:	01 f4       	brne	.+0      	; 0x2a4 <cmd_dataHandler+0x254>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <cmd_dataHandler+0x256>
 2a6:	81 32       	cpi	r24, 0x21	; 33
 2a8:	01 f0       	breq	.+0      	; 0x2aa <cmd_dataHandler+0x25a>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <cmd_dataHandler+0x25c>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <cmd_dataHandler+0x25e>
 2ae:	8a 33       	cpi	r24, 0x3A	; 58
 2b0:	00 f0       	brcs	.+0      	; 0x2b2 <cmd_dataHandler+0x262>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <cmd_dataHandler+0x264>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <cmd_dataHandler+0x266>
 2b6:	89 34       	cpi	r24, 0x49	; 73
 2b8:	01 f0       	breq	.+0      	; 0x2ba <cmd_dataHandler+0x26a>
 2ba:	8a 34       	cpi	r24, 0x4A	; 74
 2bc:	00 f4       	brcc	.+0      	; 0x2be <cmd_dataHandler+0x26e>
 2be:	98 2f       	mov	r25, r24
 2c0:	96 54       	subi	r25, 0x46	; 70
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <cmd_dataHandler+0x274>
 2c4:	8d 34       	cpi	r24, 0x4D	; 77
 2c6:	01 f0       	breq	.+0      	; 0x2c8 <cmd_dataHandler+0x278>
 2c8:	80 35       	cpi	r24, 0x50	; 80
 2ca:	01 f0       	breq	.+0      	; 0x2cc <cmd_dataHandler+0x27c>
 2cc:	8c 34       	cpi	r24, 0x4C	; 76
 2ce:	01 f0       	breq	.+0      	; 0x2d0 <cmd_dataHandler+0x280>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <cmd_dataHandler+0x282>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <cmd_dataHandler+0x284>
 2d4:	89 36       	cpi	r24, 0x69	; 105
 2d6:	01 f0       	breq	.+0      	; 0x2d8 <cmd_dataHandler+0x288>
 2d8:	8a 36       	cpi	r24, 0x6A	; 106
 2da:	00 f4       	brcc	.+0      	; 0x2dc <cmd_dataHandler+0x28c>
 2dc:	84 36       	cpi	r24, 0x64	; 100
 2de:	00 f4       	brcc	.+0      	; 0x2e0 <cmd_dataHandler+0x290>
 2e0:	81 36       	cpi	r24, 0x61	; 97
 2e2:	00 f4       	brcc	.+0      	; 0x2e4 <cmd_dataHandler+0x294>
 2e4:	84 35       	cpi	r24, 0x54	; 84
 2e6:	01 f0       	breq	.+0      	; 0x2e8 <cmd_dataHandler+0x298>
 2e8:	8a 35       	cpi	r24, 0x5A	; 90
 2ea:	01 f0       	breq	.+0      	; 0x2ec <cmd_dataHandler+0x29c>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <cmd_dataHandler+0x29e>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <cmd_dataHandler+0x2a0>
 2f0:	98 2f       	mov	r25, r24
 2f2:	96 56       	subi	r25, 0x66	; 102
 2f4:	92 30       	cpi	r25, 0x02	; 2
 2f6:	00 f4       	brcc	.+0      	; 0x2f8 <cmd_dataHandler+0x2a8>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <cmd_dataHandler+0x2aa>
 2fa:	80 37       	cpi	r24, 0x70	; 112
 2fc:	01 f0       	breq	.+0      	; 0x2fe <cmd_dataHandler+0x2ae>
 2fe:	81 37       	cpi	r24, 0x71	; 113
 300:	00 f4       	brcc	.+0      	; 0x302 <cmd_dataHandler+0x2b2>
 302:	8c 36       	cpi	r24, 0x6C	; 108
 304:	01 f0       	breq	.+0      	; 0x306 <cmd_dataHandler+0x2b6>
 306:	8d 36       	cpi	r24, 0x6D	; 109
 308:	01 f4       	brne	.+0      	; 0x30a <cmd_dataHandler+0x2ba>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <cmd_dataHandler+0x2bc>
 30c:	82 37       	cpi	r24, 0x72	; 114
 30e:	00 f0       	brcs	.+0      	; 0x310 <cmd_dataHandler+0x2c0>
 310:	85 37       	cpi	r24, 0x75	; 117
 312:	00 f0       	brcs	.+0      	; 0x314 <cmd_dataHandler+0x2c4>
 314:	8a 37       	cpi	r24, 0x7A	; 122
 316:	01 f4       	brne	.+0      	; 0x318 <cmd_dataHandler+0x2c8>
 318:	00 c0       	rjmp	.+0      	; 0x31a <cmd_dataHandler+0x2ca>
    case 'I':
    case 'm':
    case 'M':
    case 'R':
    case '!':
        command = input;
 31a:	80 93 00 00 	sts	0x0000, r24
        paramsRemaining = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	00 c0       	rjmp	.+0      	; 0x322 <cmd_dataHandler+0x2d2>
    case 'P':
    case 'l':
    case 'L':
    case 'z':
    case 'Z':
        command = input;
 322:	80 93 00 00 	sts	0x0000, r24
        paramsRemaining = 2;
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	80 93 00 00 	sts	0x0000, r24
        break;
 32c:	00 c0       	rjmp	.+0      	; 0x32e <cmd_dataHandler+0x2de>
      
    case 'r':
    case 's':
    case 't':
    case 'T':
        command = input;
 32e:	80 93 00 00 	sts	0x0000, r24
        paramsRemaining = 3;
 332:	83 e0       	ldi	r24, 0x03	; 3
 334:	00 c0       	rjmp	.+0      	; 0x336 <cmd_dataHandler+0x2e6>
        paramsRemaining = 2;
        break;
        
    case '*': 
        //_wdt_write(1);
        wdt_enable(1);
 336:	29 e0       	ldi	r18, 0x09	; 9
 338:	88 e1       	ldi	r24, 0x18	; 24
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	a8 95       	wdr
 342:	80 93 60 00 	sts	0x0060, r24
 346:	0f be       	out	0x3f, r0	; 63
 348:	20 93 60 00 	sts	0x0060, r18
        break;
 34c:	00 c0       	rjmp	.+0      	; 0x34e <cmd_dataHandler+0x2fe>
                                /* manual invocation of timer handler */
    case '/':
        dm_timerHandler();
 34e:	0e 94 00 00 	call	0	; 0x0 <cmd_Init>
 352:	00 c0       	rjmp	.+0      	; 0x354 <cmd_dataHandler+0x304>
        command = 0;
        break;
    case '+':                   /* toggle auto timer handler */
        disploop = !disploop;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 91 00 00 	lds	r25, 0x0000
 35a:	91 11       	cpse	r25, r1
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	80 93 00 00 	sts	0x0000, r24
        break;
 362:	00 c0       	rjmp	.+0      	; 0x364 <cmd_dataHandler+0x314>
        
    default:
        command = 0;
 364:	10 92 00 00 	sts	0x0000, r1
        break;
    }
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret
