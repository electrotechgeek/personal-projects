
displaymux.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dae  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000007  00000000  00000000  00000de2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000de9  2**0
                  ALLOC
  3 .debug_abbrev 00000263  00000000  00000000  00000de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001128  00000000  00000000  0000104c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000c3c  00000000  00000000  00002174  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .progmem.data 00000072  00000000  00000000  00002db0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_frame  00000160  00000000  00000000  00002e24  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_loc    00001141  00000000  00000000  00002f84  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_pubnames 0000014f  00000000  00000000  000040c5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_pubtypes 0000004c  00000000  00000000  00004214  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_aranges 00000020  00000000  00000000  00004260  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00004280  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000045e  00000000  00000000  00004418  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <dm_setTransform>:
    }

}

static void dm_setTransform(u08 which, u08 command)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
    struct _display * disp = &display[which];
   4:	90 e0       	ldi	r25, 0x00	; 0
    }
}

static u08 dm_findFirstTransform(struct _display * display)
{
    display->txListBookmark = 0;
   6:	29 e2       	ldi	r18, 0x29	; 41
   8:	30 e0       	ldi	r19, 0x00	; 0
   a:	82 9f       	mul	r24, r18
   c:	f0 01       	movw	r30, r0
   e:	83 9f       	mul	r24, r19
  10:	f0 0d       	add	r31, r0
  12:	92 9f       	mul	r25, r18
  14:	f0 0d       	add	r31, r0
  16:	11 24       	eor	r1, r1
  18:	e0 50       	subi	r30, 0x00	; 0
  1a:	f0 40       	sbci	r31, 0x00	; 0
  1c:	13 8a       	std	Z+19, r1	; 0x13
    return display->txList[0];
  1e:	43 81       	ldd	r20, Z+3	; 0x03
    return 0;
}

static u08 dm_findNextTransform(struct _display * display)
{
    display->txListBookmark += dm_cmdLength(display->txList[display->txListBookmark] & 0x0f);
  20:	df 01       	movw	r26, r30
  22:	53 96       	adiw	r26, 0x13	; 19
    struct _display * disp = &display[which];


    u08 test = dm_findFirstTransform(disp);
  
    while ((test & 0x0f) != TRANSFORM_EOL)
  24:	00 c0       	rjmp	.+0      	; 0x26 <dm_setTransform+0x26>
    {
        if (test == command)
  26:	46 17       	cp	r20, r22
  28:	01 f0       	breq	.+0      	; 0x2a <dm_setTransform+0x2a>
    return 0;
}

static u08 dm_findNextTransform(struct _display * display)
{
    display->txListBookmark += dm_cmdLength(display->txList[display->txListBookmark] & 0x0f);
  2a:	4c 91       	ld	r20, X
  2c:	ef 01       	movw	r28, r30
  2e:	c4 0f       	add	r28, r20
  30:	d1 1d       	adc	r29, r1
  32:	2b 81       	ldd	r18, Y+3	; 0x03
  34:	2f 70       	andi	r18, 0x0F	; 15
    return display->txList[0];
}

static u08 dm_cmdLength(u08 command)
{
    switch (command & 0x0f)
  36:	30 e0       	ldi	r19, 0x00	; 0
  38:	27 30       	cpi	r18, 0x07	; 7
  3a:	31 05       	cpc	r19, r1
  3c:	00 f4       	brcc	.+0      	; 0x3e <dm_setTransform+0x3e>
  3e:	20 50       	subi	r18, 0x00	; 0
  40:	30 40       	sbci	r19, 0x00	; 0
  42:	e9 01       	movw	r28, r18
  44:	28 81       	ld	r18, Y
  46:	00 c0       	rjmp	.+0      	; 0x48 <dm_setTransform+0x48>
  48:	20 e0       	ldi	r18, 0x00	; 0
    return 0;
}

static u08 dm_findNextTransform(struct _display * display)
{
    display->txListBookmark += dm_cmdLength(display->txList[display->txListBookmark] & 0x0f);
  4a:	24 0f       	add	r18, r20
  4c:	2c 93       	st	X, r18
    return display->txList[display->txListBookmark];
  4e:	ef 01       	movw	r28, r30
  50:	c2 0f       	add	r28, r18
  52:	d1 1d       	adc	r29, r1
  54:	4b 81       	ldd	r20, Y+3	; 0x03
    struct _display * disp = &display[which];


    u08 test = dm_findFirstTransform(disp);
  
    while ((test & 0x0f) != TRANSFORM_EOL)
  56:	24 2f       	mov	r18, r20
  58:	30 e0       	ldi	r19, 0x00	; 0
  5a:	2f 70       	andi	r18, 0x0F	; 15
  5c:	30 70       	andi	r19, 0x00	; 0
  5e:	2f 30       	cpi	r18, 0x0F	; 15
  60:	31 05       	cpc	r19, r1
  62:	01 f4       	brne	.+0      	; 0x64 <dm_setTransform+0x64>
            break;
        }
        test = dm_findNextTransform(disp);
    }

    disp->txList[disp->txListBookmark++] = command;
  64:	49 e2       	ldi	r20, 0x29	; 41
  66:	50 e0       	ldi	r21, 0x00	; 0
  68:	84 9f       	mul	r24, r20
  6a:	f0 01       	movw	r30, r0
  6c:	85 9f       	mul	r24, r21
  6e:	f0 0d       	add	r31, r0
  70:	94 9f       	mul	r25, r20
  72:	f0 0d       	add	r31, r0
  74:	11 24       	eor	r1, r1
  76:	e0 50       	subi	r30, 0x00	; 0
  78:	f0 40       	sbci	r31, 0x00	; 0
  7a:	83 89       	ldd	r24, Z+19	; 0x13
  7c:	df 01       	movw	r26, r30
  7e:	a8 0f       	add	r26, r24
  80:	b1 1d       	adc	r27, r1
  82:	13 96       	adiw	r26, 0x03	; 3
  84:	6c 93       	st	X, r22
  86:	13 97       	sbiw	r26, 0x03	; 3
  88:	8f 5f       	subi	r24, 0xFF	; 255
  8a:	83 8b       	std	Z+19, r24	; 0x13
    if ((test & 0x0f) == TRANSFORM_EOL)
  8c:	2f 30       	cpi	r18, 0x0F	; 15
  8e:	31 05       	cpc	r19, r1
  90:	01 f4       	brne	.+0      	; 0x92 <dm_setTransform+0x92>
    {
        disp->txList[disp->txListBookmark] = TRANSFORM_EOL;
  92:	e8 0f       	add	r30, r24
  94:	f1 1d       	adc	r31, r1
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	83 83       	std	Z+3, r24	; 0x03
    }
}
  9a:	df 91       	pop	r29
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <dm_rollUp>:
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
    {
        u08 data = display->bitsOut[index];
        temp = data & ((1 << count) - 1);
  a0:	46 2f       	mov	r20, r22
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	00 c0       	rjmp	.+0      	; 0xaa <dm_rollUp+0xa>
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	6a 95       	dec	r22
  b0:	02 f4       	brpl	.+0      	; 0xb2 <dm_rollUp+0x12>
  b2:	21 50       	subi	r18, 0x01	; 1
    {
        *dataPtr = data;
    }
}

static void dm_rollUp(struct _display * display, u08 count)
  b4:	fc 01       	movw	r30, r24
  b6:	79 96       	adiw	r30, 0x19	; 25
{
    u08 temp;
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
  b8:	30 e0       	ldi	r19, 0x00	; 0
    {
        u08 data = display->bitsOut[index];
        temp = data & ((1 << count) - 1);
        data >>= count;
        data |= temp << (NUM_ROWS - count);
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	84 1b       	sub	r24, r20
  c0:	95 0b       	sbc	r25, r21
    u08 temp;
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
    {
        u08 data = display->bitsOut[index];
  c2:	a0 81       	ld	r26, Z
        temp = data & ((1 << count) - 1);
        data >>= count;
  c4:	6a 2f       	mov	r22, r26
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	04 2e       	mov	r0, r20
  ca:	00 c0       	rjmp	.+0      	; 0xcc <dm_rollUp+0x2c>
  cc:	75 95       	asr	r23
  ce:	67 95       	ror	r22
  d0:	0a 94       	dec	r0
  d2:	02 f4       	brpl	.+0      	; 0xd4 <dm_rollUp+0x34>
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
    {
        u08 data = display->bitsOut[index];
        temp = data & ((1 << count) - 1);
  d4:	a2 23       	and	r26, r18
        data >>= count;
        data |= temp << (NUM_ROWS - count);
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	08 2e       	mov	r0, r24
  da:	00 c0       	rjmp	.+0      	; 0xdc <dm_rollUp+0x3c>
  dc:	aa 0f       	add	r26, r26
  de:	bb 1f       	adc	r27, r27
  e0:	0a 94       	dec	r0
  e2:	02 f4       	brpl	.+0      	; 0xe4 <dm_rollUp+0x44>
  e4:	6a 2b       	or	r22, r26
        display->bitsOut[index] = data;
  e6:	61 93       	st	Z+, r22
static void dm_rollUp(struct _display * display, u08 count)
{
    u08 temp;
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
  e8:	3f 5f       	subi	r19, 0xFF	; 255
  ea:	35 30       	cpi	r19, 0x05	; 5
  ec:	01 f4       	brne	.+0      	; 0xee <dm_rollUp+0x4e>
        temp = data & ((1 << count) - 1);
        data >>= count;
        data |= temp << (NUM_ROWS - count);
        display->bitsOut[index] = data;
    }
}
  ee:	08 95       	ret

000000f0 <dm_rollLeft>:

static void dm_rollLeft(struct _display * display, u08 count)
{
  f0:	fc 01       	movw	r30, r24
    u08 temp;
    u08 index;

    while (count)
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <dm_rollLeft+0x4>
    {
        temp = display->bitsOut[0];
  f4:	81 8d       	ldd	r24, Z+25	; 0x19
        for (index = 0; index < NUM_COLUMNS - 1; index++)
        {
            display->bitsOut[index] = display->bitsOut[index + 1];
  f6:	92 8d       	ldd	r25, Z+26	; 0x1a
  f8:	91 8f       	std	Z+25, r25	; 0x19
  fa:	93 8d       	ldd	r25, Z+27	; 0x1b
  fc:	92 8f       	std	Z+26, r25	; 0x1a
  fe:	94 8d       	ldd	r25, Z+28	; 0x1c
 100:	93 8f       	std	Z+27, r25	; 0x1b
 102:	95 8d       	ldd	r25, Z+29	; 0x1d
 104:	94 8f       	std	Z+28, r25	; 0x1c
        }
        display->bitsOut[NUM_COLUMNS - 1] = temp;
 106:	85 8f       	std	Z+29, r24	; 0x1d
        count--;
 108:	61 50       	subi	r22, 0x01	; 1
static void dm_rollLeft(struct _display * display, u08 count)
{
    u08 temp;
    u08 index;

    while (count)
 10a:	66 23       	and	r22, r22
 10c:	01 f4       	brne	.+0      	; 0x10e <dm_rollLeft+0x1e>
            display->bitsOut[index] = display->bitsOut[index + 1];
        }
        display->bitsOut[NUM_COLUMNS - 1] = temp;
        count--;
    }
}
 10e:	08 95       	ret

00000110 <dm_applyTransforms>:
    display[which].charIndex = set;
    dm_applyTransforms(which);
}

static void dm_applyTransforms(u08 which)
{
 110:	2f 92       	push	r2
 112:	3f 92       	push	r3
 114:	4f 92       	push	r4
 116:	5f 92       	push	r5
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	df 93       	push	r29
 130:	cf 93       	push	r28
 132:	00 d0       	rcall	.+0      	; 0x134 <dm_applyTransforms+0x24>
 134:	00 d0       	rcall	.+0      	; 0x136 <dm_applyTransforms+0x26>
 136:	00 d0       	rcall	.+0      	; 0x138 <dm_applyTransforms+0x28>
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
    u08 count;
    u08 transform;
    struct _display * disp = &display[which];
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	29 e2       	ldi	r18, 0x29	; 41
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	82 9f       	mul	r24, r18
 144:	d0 01       	movw	r26, r0
 146:	83 9f       	mul	r24, r19
 148:	b0 0d       	add	r27, r0
 14a:	92 9f       	mul	r25, r18
 14c:	b0 0d       	add	r27, r0
 14e:	11 24       	eor	r1, r1
 150:	9d 01       	movw	r18, r26
 152:	20 50       	subi	r18, 0x00	; 0
 154:	30 40       	sbci	r19, 0x00	; 0
 156:	3e 83       	std	Y+6, r19	; 0x06
 158:	2d 83       	std	Y+5, r18	; 0x05
    u08 * dataPtr = font5x7 + (disp->charIndex * NUM_COLUMNS);
 15a:	f9 01       	movw	r30, r18
 15c:	40 81       	ld	r20, Z

/*   cbi(TIMSK0, TOIE0); */
/*   TIMSK0 &= ~_BV(TOIE0); */

    if (disp->flags & FLAG_PROGCOLS)
 15e:	22 81       	ldd	r18, Z+2	; 0x02
 160:	24 ff       	sbrs	r18, 4
 162:	00 c0       	rjmp	.+0      	; 0x164 <dm_applyTransforms+0x54>
    {
        for (count = 0; count < NUM_COLUMNS; count++)
        {
            disp->bitsOut[count] = disp->progColumn[count];
 164:	24 89       	ldd	r18, Z+20	; 0x14
 166:	21 8f       	std	Z+25, r18	; 0x19
 168:	25 89       	ldd	r18, Z+21	; 0x15
 16a:	22 8f       	std	Z+26, r18	; 0x1a
 16c:	26 89       	ldd	r18, Z+22	; 0x16
 16e:	23 8f       	std	Z+27, r18	; 0x1b
 170:	27 89       	ldd	r18, Z+23	; 0x17
 172:	24 8f       	std	Z+28, r18	; 0x1c
 174:	20 8d       	ldd	r18, Z+24	; 0x18
 176:	25 8f       	std	Z+29, r18	; 0x1d
 178:	00 c0       	rjmp	.+0      	; 0x17a <dm_applyTransforms+0x6a>
static void dm_applyTransforms(u08 which)
{
    u08 count;
    u08 transform;
    struct _display * disp = &display[which];
    u08 * dataPtr = font5x7 + (disp->charIndex * NUM_COLUMNS);
 17a:	25 e0       	ldi	r18, 0x05	; 5
 17c:	42 9f       	mul	r20, r18
 17e:	a0 01       	movw	r20, r0
 180:	11 24       	eor	r1, r1
 182:	40 50       	subi	r20, 0x00	; 0
 184:	50 40       	sbci	r21, 0x00	; 0
{
    display[which].charIndex = set;
    dm_applyTransforms(which);
}

static void dm_applyTransforms(u08 which)
 186:	a0 50       	subi	r26, 0x00	; 0
 188:	b0 40       	sbci	r27, 0x00	; 0
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
    }
    else
    {
        for (count = 0; count < NUM_COLUMNS; count++)
        {
            disp->bitsOut[count] = pgm_read_byte_near(dataPtr++);
 18e:	fa 01       	movw	r30, r20
 190:	e2 0f       	add	r30, r18
 192:	f3 1f       	adc	r31, r19
 194:	e4 91       	lpm	r30, Z+
 196:	ed 93       	st	X+, r30
 198:	2f 5f       	subi	r18, 0xFF	; 255
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
            disp->bitsOut[count] = disp->progColumn[count];
        }
    }
    else
    {
        for (count = 0; count < NUM_COLUMNS; count++)
 19c:	25 30       	cpi	r18, 0x05	; 5
 19e:	31 05       	cpc	r19, r1
 1a0:	01 f4       	brne	.+0      	; 0x1a2 <dm_applyTransforms+0x92>
        {
            disp->bitsOut[count] = pgm_read_byte_near(dataPtr++);
        }
    }
  
    disp->colIndex = 0;
 1a2:	49 e2       	ldi	r20, 0x29	; 41
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	84 9f       	mul	r24, r20
 1a8:	90 01       	movw	r18, r0
 1aa:	85 9f       	mul	r24, r21
 1ac:	30 0d       	add	r19, r0
 1ae:	94 9f       	mul	r25, r20
 1b0:	30 0d       	add	r19, r0
 1b2:	11 24       	eor	r1, r1
 1b4:	f9 01       	movw	r30, r18
 1b6:	e0 50       	subi	r30, 0x00	; 0
 1b8:	f0 40       	sbci	r31, 0x00	; 0
 1ba:	11 82       	std	Z+1, r1	; 0x01
    /* test */
    disp->currentColumnBit = 8;
 1bc:	88 e0       	ldi	r24, 0x08	; 8
 1be:	87 8f       	std	Z+31, r24	; 0x1f
    }
}

static u08 dm_findFirstTransform(struct _display * display)
{
    display->txListBookmark = 0;
 1c0:	13 8a       	std	Z+19, r1	; 0x13
    return display->txList[0];
 1c2:	83 81       	ldd	r24, Z+3	; 0x03
    return display->txList[display->txListBookmark];
}

static u08 dm_getTransformData(struct _display * display, u08 index)
{
    return display->txList[display->txListBookmark + index + 1];
 1c4:	8f 01       	movw	r16, r30
 1c6:	73 e1       	ldi	r23, 0x13	; 19
 1c8:	e7 2e       	mov	r14, r23
 1ca:	f1 2c       	mov	r15, r1
 1cc:	ee 0e       	add	r14, r30
 1ce:	ff 1e       	adc	r15, r31
{
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
    {
        display->bitsOut[index] &= ~(((1 << count) - 1) << start);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	46 2e       	mov	r4, r22
 1d4:	51 2c       	mov	r5, r1
            switch (data & 0xf0)
            {
            case DIR_UP:
                data &= 0x0f;
                dm_rollUp(disp, data);
                dm_clearRows(disp, NUM_ROWS - data, data);
 1d6:	57 e0       	ldi	r21, 0x07	; 7
 1d8:	c5 2e       	mov	r12, r21
{
    display[which].charIndex = set;
    dm_applyTransforms(which);
}

static void dm_applyTransforms(u08 which)
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	a4 2e       	mov	r10, r20
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	b4 2e       	mov	r11, r20
 1e2:	a2 0e       	add	r10, r18
 1e4:	b3 1e       	adc	r11, r19
            switch (data & 0xf0)
            {
            case DIR_LEFT:
                data &= 0x0f;
                dm_rollLeft(disp, data);
                dm_clearColumns(disp, NUM_COLUMNS - data, data);
 1e6:	95 e0       	ldi	r25, 0x05	; 5
 1e8:	d9 2e       	mov	r13, r25
        break;

        case TRANSFORM_MIRROR:
        {
            u08 temp;
            temp = disp->bitsOut[0];
 1ea:	b9 e1       	ldi	r27, 0x19	; 25
 1ec:	2b 2e       	mov	r2, r27
 1ee:	31 2c       	mov	r3, r1
 1f0:	2e 0e       	add	r2, r30
 1f2:	3f 1e       	adc	r3, r31
            disp->bitsOut[0] = disp->bitsOut[4];
 1f4:	ad e1       	ldi	r26, 0x1D	; 29
 1f6:	8a 2e       	mov	r8, r26
 1f8:	91 2c       	mov	r9, r1
 1fa:	8e 0e       	add	r8, r30
 1fc:	9f 1e       	adc	r9, r31
            disp->bitsOut[4] = disp->bitsOut[1];
 1fe:	9f 01       	movw	r18, r30
 200:	26 5e       	subi	r18, 0xE6	; 230
 202:	3f 4f       	sbci	r19, 0xFF	; 255
 204:	3a 83       	std	Y+2, r19	; 0x02
 206:	29 83       	std	Y+1, r18	; 0x01
            disp->bitsOut[1] = disp->bitsOut[3];
 208:	7c 96       	adiw	r30, 0x1c	; 28
 20a:	fc 83       	std	Y+4, r31	; 0x04
 20c:	eb 83       	std	Y+3, r30	; 0x03
    disp->colIndex = 0;
    /* test */
    disp->currentColumnBit = 8;

    transform = dm_findFirstTransform(disp);
    while ((transform & 0x0f) != TRANSFORM_EOL)
 20e:	00 c0       	rjmp	.+0      	; 0x210 <dm_applyTransforms+0x100>
    {
        int tmp = (int)disp;
        u08 data;
        u08 count2;
        switch (transform & 0x0f)
 210:	85 30       	cpi	r24, 0x05	; 5
 212:	91 05       	cpc	r25, r1
 214:	04 f4       	brge	.+0      	; 0x216 <dm_applyTransforms+0x106>
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	91 05       	cpc	r25, r1
 21a:	04 f0       	brlt	.+0      	; 0x21c <dm_applyTransforms+0x10c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <dm_applyTransforms+0x10e>
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	91 05       	cpc	r25, r1
 222:	01 f0       	breq	.+0      	; 0x224 <dm_applyTransforms+0x114>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	91 05       	cpc	r25, r1
 228:	04 f0       	brlt	.+0      	; 0x22a <dm_applyTransforms+0x11a>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <dm_applyTransforms+0x11c>
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	01 f0       	breq	.+0      	; 0x230 <dm_applyTransforms+0x120>
 230:	00 c0       	rjmp	.+0      	; 0x232 <dm_applyTransforms+0x122>
 232:	85 30       	cpi	r24, 0x05	; 5
 234:	91 05       	cpc	r25, r1
 236:	01 f4       	brne	.+0      	; 0x238 <dm_applyTransforms+0x128>
 238:	00 c0       	rjmp	.+0      	; 0x23a <dm_applyTransforms+0x12a>
 23a:	86 30       	cpi	r24, 0x06	; 6
 23c:	91 05       	cpc	r25, r1
 23e:	01 f0       	breq	.+0      	; 0x240 <dm_applyTransforms+0x130>
 240:	00 c0       	rjmp	.+0      	; 0x242 <dm_applyTransforms+0x132>
 242:	00 c0       	rjmp	.+0      	; 0x244 <dm_applyTransforms+0x134>
{
    display[which].charIndex = set;
    dm_applyTransforms(which);
}

static void dm_applyTransforms(u08 which)
 244:	f5 01       	movw	r30, r10
 246:	40 e0       	ldi	r20, 0x00	; 0
        case TRANSFORM_FLIP:
        {
            for (count2 = 0; count2 < NUM_COLUMNS; count2++)
            {
                data = disp->bitsOut[count2];
                data = ((data & 0xAA) >>  1) | ((data & 0x55) <<  1);
 248:	80 81       	ld	r24, Z
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	9c 01       	movw	r18, r24
 24e:	25 75       	andi	r18, 0x55	; 85
 250:	30 70       	andi	r19, 0x00	; 0
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	8a 7a       	andi	r24, 0xAA	; 170
 258:	90 70       	andi	r25, 0x00	; 0
 25a:	95 95       	asr	r25
 25c:	87 95       	ror	r24
 25e:	82 2b       	or	r24, r18
                data = ((data & 0xCC) >>  2) | ((data & 0x33) <<  2);
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	9c 01       	movw	r18, r24
 264:	23 73       	andi	r18, 0x33	; 51
 266:	30 70       	andi	r19, 0x00	; 0
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
 270:	8c 7c       	andi	r24, 0xCC	; 204
 272:	90 70       	andi	r25, 0x00	; 0
 274:	95 95       	asr	r25
 276:	87 95       	ror	r24
 278:	95 95       	asr	r25
 27a:	87 95       	ror	r24
 27c:	82 2b       	or	r24, r18
                data = (data >> 4) | (data << 4);
 27e:	82 95       	swap	r24
                data = data >> 1;
 280:	86 95       	lsr	r24
                disp->bitsOut[count2] = data;
 282:	81 93       	st	Z+, r24
        switch (transform & 0x0f)
        {

        case TRANSFORM_FLIP:
        {
            for (count2 = 0; count2 < NUM_COLUMNS; count2++)
 284:	4f 5f       	subi	r20, 0xFF	; 255
 286:	45 30       	cpi	r20, 0x05	; 5
 288:	01 f4       	brne	.+0      	; 0x28a <dm_applyTransforms+0x17a>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <dm_applyTransforms+0x17c>
        break;

        case TRANSFORM_MIRROR:
        {
            u08 temp;
            temp = disp->bitsOut[0];
 28c:	f1 01       	movw	r30, r2
 28e:	80 81       	ld	r24, Z
            disp->bitsOut[0] = disp->bitsOut[4];
 290:	f4 01       	movw	r30, r8
 292:	90 81       	ld	r25, Z
 294:	f1 01       	movw	r30, r2
 296:	90 83       	st	Z, r25
            disp->bitsOut[4] = disp->bitsOut[1];
 298:	e9 81       	ldd	r30, Y+1	; 0x01
 29a:	fa 81       	ldd	r31, Y+2	; 0x02
 29c:	90 81       	ld	r25, Z
 29e:	f4 01       	movw	r30, r8
 2a0:	90 83       	st	Z, r25
            disp->bitsOut[1] = disp->bitsOut[3];
 2a2:	eb 81       	ldd	r30, Y+3	; 0x03
 2a4:	fc 81       	ldd	r31, Y+4	; 0x04
 2a6:	90 81       	ld	r25, Z
 2a8:	e9 81       	ldd	r30, Y+1	; 0x01
 2aa:	fa 81       	ldd	r31, Y+2	; 0x02
 2ac:	90 83       	st	Z, r25
            disp->bitsOut[3] = disp->bitsOut[4];
 2ae:	f4 01       	movw	r30, r8
 2b0:	90 81       	ld	r25, Z
 2b2:	eb 81       	ldd	r30, Y+3	; 0x03
 2b4:	fc 81       	ldd	r31, Y+4	; 0x04
 2b6:	90 83       	st	Z, r25
            disp->bitsOut[4] = temp;
 2b8:	f4 01       	movw	r30, r8
 2ba:	80 83       	st	Z, r24
        }
        break;
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <dm_applyTransforms+0x1ae>
{
    display[which].charIndex = set;
    dm_applyTransforms(which);
}

static void dm_applyTransforms(u08 which)
 2be:	f5 01       	movw	r30, r10
 2c0:	90 e0       	ldi	r25, 0x00	; 0
	  
        case TRANSFORM_REVERSE: 
        { 
            for (count2 = 0; count2 < NUM_COLUMNS; count2++) 
            { 
                disp->bitsOut[count2] = ~disp->bitsOut[count2] & 0x7f;
 2c2:	80 81       	ld	r24, Z
 2c4:	80 95       	com	r24
 2c6:	8f 77       	andi	r24, 0x7F	; 127
 2c8:	81 93       	st	Z+, r24
        }
        break;
	  
        case TRANSFORM_REVERSE: 
        { 
            for (count2 = 0; count2 < NUM_COLUMNS; count2++) 
 2ca:	9f 5f       	subi	r25, 0xFF	; 255
 2cc:	95 30       	cpi	r25, 0x05	; 5
 2ce:	01 f4       	brne	.+0      	; 0x2d0 <dm_applyTransforms+0x1c0>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <dm_applyTransforms+0x1c2>
    return display->txList[display->txListBookmark];
}

static u08 dm_getTransformData(struct _display * display, u08 index)
{
    return display->txList[display->txListBookmark + index + 1];
 2d2:	f7 01       	movw	r30, r14
 2d4:	80 81       	ld	r24, Z
 2d6:	f8 01       	movw	r30, r16
 2d8:	e8 0f       	add	r30, r24
 2da:	f1 1d       	adc	r31, r1
 2dc:	64 81       	ldd	r22, Z+4	; 0x04
        case TRANSFORM_ROLL_VERT:
        case TRANSFORM_ROLL_HORZ:
        {
            u08 data;
            data = dm_getTransformData(disp, 0);
            switch (data & 0xf0)
 2de:	86 2f       	mov	r24, r22
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	80 7f       	andi	r24, 0xF0	; 240
 2e4:	90 70       	andi	r25, 0x00	; 0
 2e6:	80 32       	cpi	r24, 0x20	; 32
 2e8:	91 05       	cpc	r25, r1
 2ea:	01 f0       	breq	.+0      	; 0x2ec <dm_applyTransforms+0x1dc>
 2ec:	81 32       	cpi	r24, 0x21	; 33
 2ee:	91 05       	cpc	r25, r1
 2f0:	04 f4       	brge	.+0      	; 0x2f2 <dm_applyTransforms+0x1e2>
 2f2:	80 31       	cpi	r24, 0x10	; 16
 2f4:	91 05       	cpc	r25, r1
 2f6:	01 f0       	breq	.+0      	; 0x2f8 <dm_applyTransforms+0x1e8>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <dm_applyTransforms+0x1ea>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <dm_applyTransforms+0x1ec>
 2fc:	80 33       	cpi	r24, 0x30	; 48
 2fe:	91 05       	cpc	r25, r1
 300:	01 f0       	breq	.+0      	; 0x302 <dm_applyTransforms+0x1f2>
 302:	80 34       	cpi	r24, 0x40	; 64
 304:	91 05       	cpc	r25, r1
 306:	01 f0       	breq	.+0      	; 0x308 <dm_applyTransforms+0x1f8>
 308:	00 c0       	rjmp	.+0      	; 0x30a <dm_applyTransforms+0x1fa>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <dm_applyTransforms+0x1fc>
            {
            case DIR_UP: dm_rollUp(disp, data & 0x0f); break;
 30c:	6f 70       	andi	r22, 0x0F	; 15
 30e:	00 c0       	rjmp	.+0      	; 0x310 <dm_applyTransforms+0x200>
            case DIR_DOWN: dm_rollUp(disp, NUM_ROWS - (data & 0x0f)); break;
 310:	6f 70       	andi	r22, 0x0F	; 15
 312:	fc 2d       	mov	r31, r12
 314:	f6 1b       	sub	r31, r22
 316:	6f 2f       	mov	r22, r31
 318:	8d 81       	ldd	r24, Y+5	; 0x05
 31a:	9e 81       	ldd	r25, Y+6	; 0x06
 31c:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
 320:	00 c0       	rjmp	.+0      	; 0x322 <dm_applyTransforms+0x212>
            case DIR_LEFT: dm_rollLeft(disp, data & 0x0f); break;
 322:	6f 70       	andi	r22, 0x0F	; 15
 324:	00 c0       	rjmp	.+0      	; 0x326 <dm_applyTransforms+0x216>
            case DIR_RIGHT: dm_rollLeft(disp, NUM_COLUMNS - (data & 0x0f)); break;
 326:	6f 70       	andi	r22, 0x0F	; 15
 328:	2d 2d       	mov	r18, r13
 32a:	26 1b       	sub	r18, r22
 32c:	62 2f       	mov	r22, r18
 32e:	8d 81       	ldd	r24, Y+5	; 0x05
 330:	9e 81       	ldd	r25, Y+6	; 0x06
 332:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
 336:	00 c0       	rjmp	.+0      	; 0x338 <dm_applyTransforms+0x228>
    return display->txList[display->txListBookmark];
}

static u08 dm_getTransformData(struct _display * display, u08 index)
{
    return display->txList[display->txListBookmark + index + 1];
 338:	f7 01       	movw	r30, r14
 33a:	80 81       	ld	r24, Z
 33c:	f8 01       	movw	r30, r16
 33e:	e8 0f       	add	r30, r24
 340:	f1 1d       	adc	r31, r1
 342:	64 81       	ldd	r22, Z+4	; 0x04

        case TRANSFORM_SHIFT_VERT:
        {
            u08 data;
            data = dm_getTransformData(disp, 0);
            switch (data & 0xf0)
 344:	86 2f       	mov	r24, r22
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	80 7f       	andi	r24, 0xF0	; 240
 34a:	90 70       	andi	r25, 0x00	; 0
 34c:	80 31       	cpi	r24, 0x10	; 16
 34e:	91 05       	cpc	r25, r1
 350:	01 f0       	breq	.+0      	; 0x352 <dm_applyTransforms+0x242>
 352:	80 32       	cpi	r24, 0x20	; 32
 354:	91 05       	cpc	r25, r1
 356:	01 f0       	breq	.+0      	; 0x358 <dm_applyTransforms+0x248>
 358:	00 c0       	rjmp	.+0      	; 0x35a <dm_applyTransforms+0x24a>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <dm_applyTransforms+0x24c>
            {
            case DIR_UP:
                data &= 0x0f;
 35c:	9f e0       	ldi	r25, 0x0F	; 15
 35e:	79 2e       	mov	r7, r25
 360:	76 22       	and	r7, r22
                dm_rollUp(disp, data);
 362:	8d 81       	ldd	r24, Y+5	; 0x05
 364:	9e 81       	ldd	r25, Y+6	; 0x06
 366:	67 2d       	mov	r22, r7
 368:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
{
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
    {
        display->bitsOut[index] &= ~(((1 << count) - 1) << start);
 36c:	c2 01       	movw	r24, r4
 36e:	07 2c       	mov	r0, r7
 370:	00 c0       	rjmp	.+0      	; 0x372 <dm_applyTransforms+0x262>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	0a 94       	dec	r0
 378:	02 f4       	brpl	.+0      	; 0x37a <dm_applyTransforms+0x26a>
 37a:	01 97       	sbiw	r24, 0x01	; 1
            switch (data & 0xf0)
            {
            case DIR_UP:
                data &= 0x0f;
                dm_rollUp(disp, data);
                dm_clearRows(disp, NUM_ROWS - data, data);
 37c:	2c 2d       	mov	r18, r12
 37e:	27 19       	sub	r18, r7
{
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
    {
        display->bitsOut[index] &= ~(((1 << count) - 1) << start);
 380:	00 c0       	rjmp	.+0      	; 0x382 <dm_applyTransforms+0x272>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	2a 95       	dec	r18
 388:	02 f4       	brpl	.+0      	; 0x38a <dm_applyTransforms+0x27a>
 38a:	80 95       	com	r24
{
    display[which].charIndex = set;
    dm_applyTransforms(which);
}

static void dm_applyTransforms(u08 which)
 38c:	f5 01       	movw	r30, r10

static void dm_clearRows(struct _display * display, u08 start, u08 count)
{
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
 38e:	90 e0       	ldi	r25, 0x00	; 0
    {
        display->bitsOut[index] &= ~(((1 << count) - 1) << start);
 390:	20 81       	ld	r18, Z
 392:	28 23       	and	r18, r24
 394:	21 93       	st	Z+, r18

static void dm_clearRows(struct _display * display, u08 start, u08 count)
{
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
 396:	9f 5f       	subi	r25, 0xFF	; 255
 398:	95 30       	cpi	r25, 0x05	; 5
 39a:	01 f4       	brne	.+0      	; 0x39c <dm_applyTransforms+0x28c>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <dm_applyTransforms+0x28e>
                dm_rollUp(disp, data);
                dm_clearRows(disp, NUM_ROWS - data, data);
                break;
		
            case DIR_DOWN:
                data &= 0x0f;
 39e:	8f e0       	ldi	r24, 0x0F	; 15
 3a0:	78 2e       	mov	r7, r24
 3a2:	76 22       	and	r7, r22
                dm_rollUp(disp, NUM_ROWS - data);
 3a4:	6c 2d       	mov	r22, r12
 3a6:	67 19       	sub	r22, r7
 3a8:	8d 81       	ldd	r24, Y+5	; 0x05
 3aa:	9e 81       	ldd	r25, Y+6	; 0x06
 3ac:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
{
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
    {
        display->bitsOut[index] &= ~(((1 << count) - 1) << start);
 3b0:	b2 01       	movw	r22, r4
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <dm_applyTransforms+0x2a4>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	7a 94       	dec	r7
 3ba:	02 f4       	brpl	.+0      	; 0x3bc <dm_applyTransforms+0x2ac>
 3bc:	61 95       	neg	r22
{
    display[which].charIndex = set;
    dm_applyTransforms(which);
}

static void dm_applyTransforms(u08 which)
 3be:	f5 01       	movw	r30, r10

static void dm_clearRows(struct _display * display, u08 start, u08 count)
{
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
 3c0:	80 e0       	ldi	r24, 0x00	; 0
    {
        display->bitsOut[index] &= ~(((1 << count) - 1) << start);
 3c2:	90 81       	ld	r25, Z
 3c4:	96 23       	and	r25, r22
 3c6:	91 93       	st	Z+, r25

static void dm_clearRows(struct _display * display, u08 start, u08 count)
{
    u08 index;

    for (index = 0; index < NUM_COLUMNS; index++)
 3c8:	8f 5f       	subi	r24, 0xFF	; 255
 3ca:	85 30       	cpi	r24, 0x05	; 5
 3cc:	01 f4       	brne	.+0      	; 0x3ce <dm_applyTransforms+0x2be>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <dm_applyTransforms+0x2c0>
    return display->txList[display->txListBookmark];
}

static u08 dm_getTransformData(struct _display * display, u08 index)
{
    return display->txList[display->txListBookmark + index + 1];
 3d0:	f7 01       	movw	r30, r14
 3d2:	80 81       	ld	r24, Z
 3d4:	f8 01       	movw	r30, r16
 3d6:	e8 0f       	add	r30, r24
 3d8:	f1 1d       	adc	r31, r1
 3da:	74 80       	ldd	r7, Z+4	; 0x04
        }

        case TRANSFORM_SHIFT_HORZ:
        {
            data = dm_getTransformData(disp, 0);
            switch (data & 0xf0)
 3dc:	87 2d       	mov	r24, r7
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	80 7f       	andi	r24, 0xF0	; 240
 3e2:	90 70       	andi	r25, 0x00	; 0
 3e4:	80 33       	cpi	r24, 0x30	; 48
 3e6:	91 05       	cpc	r25, r1
 3e8:	01 f0       	breq	.+0      	; 0x3ea <dm_applyTransforms+0x2da>
 3ea:	80 34       	cpi	r24, 0x40	; 64
 3ec:	91 05       	cpc	r25, r1
 3ee:	01 f4       	brne	.+0      	; 0x3f0 <dm_applyTransforms+0x2e0>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <dm_applyTransforms+0x2e2>
            {
            case DIR_LEFT:
                data &= 0x0f;
 3f2:	ff e0       	ldi	r31, 0x0F	; 15
 3f4:	7f 22       	and	r7, r31
                dm_rollLeft(disp, data);
 3f6:	8d 81       	ldd	r24, Y+5	; 0x05
 3f8:	9e 81       	ldd	r25, Y+6	; 0x06
 3fa:	67 2d       	mov	r22, r7
 3fc:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
                dm_clearColumns(disp, NUM_COLUMNS - data, data);
 400:	8d 2d       	mov	r24, r13
 402:	87 19       	sub	r24, r7
static void dm_clearColumns(struct _display * display, u08 start, u08 count)
{
    do
    {
        --count;
        display->bitsOut[start + count] = 0;
 404:	90 e0       	ldi	r25, 0x00	; 0

static void dm_clearColumns(struct _display * display, u08 start, u08 count)
{
    do
    {
        --count;
 406:	7a 94       	dec	r7
        display->bitsOut[start + count] = 0;
 408:	f8 01       	movw	r30, r16
 40a:	e7 0d       	add	r30, r7
 40c:	f1 1d       	adc	r31, r1
 40e:	e8 0f       	add	r30, r24
 410:	f9 1f       	adc	r31, r25
 412:	11 8e       	std	Z+25, r1	; 0x19
    } while (count > 0);
 414:	77 20       	and	r7, r7
 416:	01 f4       	brne	.+0      	; 0x418 <dm_applyTransforms+0x308>
 418:	00 c0       	rjmp	.+0      	; 0x41a <dm_applyTransforms+0x30a>
                dm_rollLeft(disp, data);
                dm_clearColumns(disp, NUM_COLUMNS - data, data);
                break;
		
            case DIR_RIGHT:
                data &= 0x0f;
 41a:	2f e0       	ldi	r18, 0x0F	; 15
 41c:	72 22       	and	r7, r18
                dm_rollLeft(disp, NUM_COLUMNS - data);
 41e:	6d 2d       	mov	r22, r13
 420:	67 19       	sub	r22, r7
 422:	8d 81       	ldd	r24, Y+5	; 0x05
 424:	9e 81       	ldd	r25, Y+6	; 0x06
 426:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>

static void dm_clearColumns(struct _display * display, u08 start, u08 count)
{
    do
    {
        --count;
 42a:	7a 94       	dec	r7
        display->bitsOut[start + count] = 0;
 42c:	f8 01       	movw	r30, r16
 42e:	e7 0d       	add	r30, r7
 430:	f1 1d       	adc	r31, r1
 432:	11 8e       	std	Z+25, r1	; 0x19
    } while (count > 0);
 434:	77 20       	and	r7, r7
 436:	01 f4       	brne	.+0      	; 0x438 <dm_applyTransforms+0x328>
    return 0;
}

static u08 dm_findNextTransform(struct _display * display)
{
    display->txListBookmark += dm_cmdLength(display->txList[display->txListBookmark] & 0x0f);
 438:	f7 01       	movw	r30, r14
 43a:	20 81       	ld	r18, Z
 43c:	f8 01       	movw	r30, r16
 43e:	e2 0f       	add	r30, r18
 440:	f1 1d       	adc	r31, r1
 442:	83 81       	ldd	r24, Z+3	; 0x03
 444:	8f 70       	andi	r24, 0x0F	; 15
    return display->txList[0];
}

static u08 dm_cmdLength(u08 command)
{
    switch (command & 0x0f)
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	87 30       	cpi	r24, 0x07	; 7
 44a:	91 05       	cpc	r25, r1
 44c:	00 f4       	brcc	.+0      	; 0x44e <dm_applyTransforms+0x33e>
 44e:	80 50       	subi	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	80 81       	ld	r24, Z
 456:	00 c0       	rjmp	.+0      	; 0x458 <dm_applyTransforms+0x348>
 458:	80 e0       	ldi	r24, 0x00	; 0
    return 0;
}

static u08 dm_findNextTransform(struct _display * display)
{
    display->txListBookmark += dm_cmdLength(display->txList[display->txListBookmark] & 0x0f);
 45a:	82 0f       	add	r24, r18
 45c:	f7 01       	movw	r30, r14
 45e:	80 83       	st	Z, r24
    return display->txList[display->txListBookmark];
 460:	f8 01       	movw	r30, r16
 462:	e8 0f       	add	r30, r24
 464:	f1 1d       	adc	r31, r1
 466:	83 81       	ldd	r24, Z+3	; 0x03
    disp->colIndex = 0;
    /* test */
    disp->currentColumnBit = 8;

    transform = dm_findFirstTransform(disp);
    while ((transform & 0x0f) != TRANSFORM_EOL)
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	8f 70       	andi	r24, 0x0F	; 15
 46c:	90 70       	andi	r25, 0x00	; 0
 46e:	8f 30       	cpi	r24, 0x0F	; 15
 470:	91 05       	cpc	r25, r1
 472:	01 f0       	breq	.+0      	; 0x474 <dm_applyTransforms+0x364>
 474:	00 c0       	rjmp	.+0      	; 0x476 <dm_applyTransforms+0x366>
        }
        transform = dm_findNextTransform(disp);
    }
/*   sei(); */
/*   TIMSK0 |= _BV(TOIE0); */
}
 476:	26 96       	adiw	r28, 0x06	; 6
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	cf 91       	pop	r28
 484:	df 91       	pop	r29
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	df 90       	pop	r13
 490:	cf 90       	pop	r12
 492:	bf 90       	pop	r11
 494:	af 90       	pop	r10
 496:	9f 90       	pop	r9
 498:	8f 90       	pop	r8
 49a:	7f 90       	pop	r7
 49c:	5f 90       	pop	r5
 49e:	4f 90       	pop	r4
 4a0:	3f 90       	pop	r3
 4a2:	2f 90       	pop	r2
 4a4:	08 95       	ret

000004a6 <dm_deleteTransform>:
    display[which].paletteSelected = index;
/*   sei(); */
}

static void dm_deleteTransform(u08 which, u08 command)
{
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
    struct _display * disp = &display[which];
 4aa:	90 e0       	ldi	r25, 0x00	; 0
    }
}

static u08 dm_findFirstTransform(struct _display * display)
{
    display->txListBookmark = 0;
 4ac:	29 e2       	ldi	r18, 0x29	; 41
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	82 9f       	mul	r24, r18
 4b2:	f0 01       	movw	r30, r0
 4b4:	83 9f       	mul	r24, r19
 4b6:	f0 0d       	add	r31, r0
 4b8:	92 9f       	mul	r25, r18
 4ba:	f0 0d       	add	r31, r0
 4bc:	11 24       	eor	r1, r1
 4be:	e0 50       	subi	r30, 0x00	; 0
 4c0:	f0 40       	sbci	r31, 0x00	; 0
 4c2:	13 8a       	std	Z+19, r1	; 0x13
}

static void dm_deleteTransform(u08 which, u08 command)
{
    struct _display * disp = &display[which];
    u08 test = (dm_findFirstTransform(disp) & 0x0f);
 4c4:	23 81       	ldd	r18, Z+3	; 0x03
 4c6:	2f 70       	andi	r18, 0x0F	; 15
    return 0;
}

static u08 dm_findNextTransform(struct _display * display)
{
    display->txListBookmark += dm_cmdLength(display->txList[display->txListBookmark] & 0x0f);
 4c8:	df 01       	movw	r26, r30
 4ca:	53 96       	adiw	r26, 0x13	; 19
static void dm_deleteTransform(u08 which, u08 command)
{
    struct _display * disp = &display[which];
    u08 test = (dm_findFirstTransform(disp) & 0x0f);

    while (test != TRANSFORM_EOL)
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <dm_deleteTransform+0x28>
    {
        if (test == command)
 4ce:	26 17       	cp	r18, r22
 4d0:	01 f4       	brne	.+0      	; 0x4d2 <dm_deleteTransform+0x2c>
    return display->txList[0];
}

static u08 dm_cmdLength(u08 command)
{
    switch (command & 0x0f)
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	27 30       	cpi	r18, 0x07	; 7
 4d6:	31 05       	cpc	r19, r1
 4d8:	00 f4       	brcc	.+0      	; 0x4da <dm_deleteTransform+0x34>
 4da:	20 50       	subi	r18, 0x00	; 0
 4dc:	30 40       	sbci	r19, 0x00	; 0
 4de:	d9 01       	movw	r26, r18
 4e0:	ec 91       	ld	r30, X
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <dm_deleteTransform+0x3e>
 4e4:	e0 e0       	ldi	r30, 0x00	; 0
    {
        if (test == command)
        {
            u08 length = dm_cmdLength(command);

            memmove(&disp->txList[disp->txListBookmark],
 4e6:	29 e2       	ldi	r18, 0x29	; 41
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	82 9f       	mul	r24, r18
 4ec:	a0 01       	movw	r20, r0
 4ee:	83 9f       	mul	r24, r19
 4f0:	50 0d       	add	r21, r0
 4f2:	92 9f       	mul	r25, r18
 4f4:	50 0d       	add	r21, r0
 4f6:	11 24       	eor	r1, r1
 4f8:	9a 01       	movw	r18, r20
 4fa:	20 50       	subi	r18, 0x00	; 0
 4fc:	30 40       	sbci	r19, 0x00	; 0
 4fe:	40 50       	subi	r20, 0x00	; 0
 500:	50 40       	sbci	r21, 0x00	; 0
 502:	ea 01       	movw	r28, r20
 504:	8b 89       	ldd	r24, Y+19	; 0x13
                    &disp->txList[disp->txListBookmark + length],
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	bf 01       	movw	r22, r30
 50c:	68 0f       	add	r22, r24
 50e:	79 1f       	adc	r23, r25
    {
        if (test == command)
        {
            u08 length = dm_cmdLength(command);

            memmove(&disp->txList[disp->txListBookmark],
 510:	62 0f       	add	r22, r18
 512:	73 1f       	adc	r23, r19
                    &disp->txList[disp->txListBookmark + length],
                    TRANSFORM_LIST_LENGTH - disp->txListBookmark - length);
 514:	40 e1       	ldi	r20, 0x10	; 16
 516:	50 e0       	ldi	r21, 0x00	; 0
 518:	48 1b       	sub	r20, r24
 51a:	59 0b       	sbc	r21, r25
 51c:	4e 1b       	sub	r20, r30
 51e:	5f 0b       	sbc	r21, r31
    {
        if (test == command)
        {
            u08 length = dm_cmdLength(command);

            memmove(&disp->txList[disp->txListBookmark],
 520:	82 0f       	add	r24, r18
 522:	93 1f       	adc	r25, r19
 524:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
                    &disp->txList[disp->txListBookmark + length],
                    TRANSFORM_LIST_LENGTH - disp->txListBookmark - length);

            break;
 528:	00 c0       	rjmp	.+0      	; 0x52a <dm_deleteTransform+0x84>
    return 0;
}

static u08 dm_findNextTransform(struct _display * display)
{
    display->txListBookmark += dm_cmdLength(display->txList[display->txListBookmark] & 0x0f);
 52a:	4c 91       	ld	r20, X
 52c:	ef 01       	movw	r28, r30
 52e:	c4 0f       	add	r28, r20
 530:	d1 1d       	adc	r29, r1
 532:	2b 81       	ldd	r18, Y+3	; 0x03
 534:	2f 70       	andi	r18, 0x0F	; 15
    return display->txList[0];
}

static u08 dm_cmdLength(u08 command)
{
    switch (command & 0x0f)
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	27 30       	cpi	r18, 0x07	; 7
 53a:	31 05       	cpc	r19, r1
 53c:	00 f4       	brcc	.+0      	; 0x53e <dm_deleteTransform+0x98>
 53e:	20 50       	subi	r18, 0x00	; 0
 540:	30 40       	sbci	r19, 0x00	; 0
 542:	e9 01       	movw	r28, r18
 544:	28 81       	ld	r18, Y
 546:	00 c0       	rjmp	.+0      	; 0x548 <dm_deleteTransform+0xa2>
 548:	20 e0       	ldi	r18, 0x00	; 0
    return 0;
}

static u08 dm_findNextTransform(struct _display * display)
{
    display->txListBookmark += dm_cmdLength(display->txList[display->txListBookmark] & 0x0f);
 54a:	24 0f       	add	r18, r20
 54c:	2c 93       	st	X, r18
    return display->txList[display->txListBookmark];
 54e:	ef 01       	movw	r28, r30
 550:	c2 0f       	add	r28, r18
 552:	d1 1d       	adc	r29, r1
                    &disp->txList[disp->txListBookmark + length],
                    TRANSFORM_LIST_LENGTH - disp->txListBookmark - length);

            break;
        }
        test = (dm_findNextTransform(disp) & 0x0f);
 554:	2b 81       	ldd	r18, Y+3	; 0x03
 556:	2f 70       	andi	r18, 0x0F	; 15
static void dm_deleteTransform(u08 which, u08 command)
{
    struct _display * disp = &display[which];
    u08 test = (dm_findFirstTransform(disp) & 0x0f);

    while (test != TRANSFORM_EOL)
 558:	2f 30       	cpi	r18, 0x0F	; 15
 55a:	01 f0       	breq	.+0      	; 0x55c <dm_deleteTransform+0xb6>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <dm_deleteTransform+0xb8>
            break;
        }
        test = (dm_findNextTransform(disp) & 0x0f);
    }

}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <dm_timerHandler>:
static void dm_clearRows(struct _display * display, u08 start, u08 count);
static void dm_clearColumns(struct _display * display, u08 start, u08 count);


void dm_timerHandler(void)
{
 564:	2f 92       	push	r2
 566:	3f 92       	push	r3
 568:	4f 92       	push	r4
 56a:	5f 92       	push	r5
 56c:	6f 92       	push	r6
 56e:	7f 92       	push	r7
 570:	8f 92       	push	r8
 572:	9f 92       	push	r9
 574:	af 92       	push	r10
 576:	bf 92       	push	r11
 578:	cf 92       	push	r12
 57a:	df 92       	push	r13
 57c:	ef 92       	push	r14
 57e:	ff 92       	push	r15
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	df 93       	push	r29
 586:	cf 93       	push	r28
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	29 97       	sbiw	r28, 0x09	; 9
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
                }
            if (rowCtlPtr != disp->rowCtlPtr) /*  If we changed palettes... */
            {
                oldRowCtlPtr = rowCtlPtr; /* get the old palette pointer */
                rowCtlPtr = disp->rowCtlPtr; /* get the new palette pointer */
                disp->oldRowCtlPtr = oldRowCtlPtr; /* store the old palette pointer */
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	dc 01       	movw	r26, r24
 59e:	90 96       	adiw	r26, 0x20	; 32
static void dm_clearRows(struct _display * display, u08 start, u08 count);
static void dm_clearColumns(struct _display * display, u08 start, u08 count);


void dm_timerHandler(void)
{
 5a0:	66 24       	eor	r6, r6
 5a2:	77 24       	eor	r7, r7
 5a4:	1c 82       	std	Y+4, r1	; 0x04
 5a6:	1b 82       	std	Y+3, r1	; 0x03
 5a8:	44 24       	eor	r4, r4
 5aa:	55 24       	eor	r5, r5
        u08 colOnBit = pgm_read_byte_near(colCtlPtr + offsetof(PortPin, pin));
      
        /* If we're starting a new frame... */
        if (litBitIndex == 0)
        {
            (*disp->litPort) |= _BV(disp->litBit); /* turn off the previous column */
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	98 87       	std	Y+8, r25	; 0x08
 5b2:	8f 83       	std	Y+7, r24	; 0x07
    u08 whichIndex = 0;

    for (whichIndex = 0; whichIndex < NUM_DISPLAYS; whichIndex++)
    {
        struct _display * disp = &display[whichIndex];
        u08 flags = disp->flags;
 5b4:	ef 81       	ldd	r30, Y+7	; 0x07
 5b6:	f8 85       	ldd	r31, Y+8	; 0x08
 5b8:	f1 81       	ldd	r31, Z+1	; 0x01
 5ba:	fe 83       	std	Y+6, r31	; 0x06
        u08 litBitIndex = disp->currentColumnBit;
 5bc:	ef 81       	ldd	r30, Y+7	; 0x07
 5be:	f8 85       	ldd	r31, Y+8	; 0x08
 5c0:	16 8d       	ldd	r17, Z+30	; 0x1e
        u08 colIndex = disp->colIndex;
 5c2:	00 81       	ld	r16, Z
/*             { */
/*                 colIndex = 0; */
/*             } */
/*         } */

        const u08 * colCtlPtr = &columnCtl[whichIndex][colIndex];
 5c4:	f3 e0       	ldi	r31, 0x03	; 3
 5c6:	0f 9f       	mul	r16, r31
 5c8:	60 01       	movw	r12, r0
 5ca:	11 24       	eor	r1, r1
 5cc:	4b 81       	ldd	r20, Y+3	; 0x03
 5ce:	5c 81       	ldd	r21, Y+4	; 0x04
 5d0:	c4 0e       	add	r12, r20
 5d2:	d5 1e       	adc	r13, r21
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	c6 0e       	add	r12, r22
 5da:	d7 1e       	adc	r13, r23
        u08 * rowCtlPtr = disp->rowCtlPtr;
 5dc:	8d 91       	ld	r24, X+
 5de:	9c 91       	ld	r25, X
 5e0:	11 97       	sbiw	r26, 0x01	; 1
        u08 * oldRowCtlPtr = disp->oldRowCtlPtr;
 5e2:	12 96       	adiw	r26, 0x02	; 2
 5e4:	ad 90       	ld	r10, X+
 5e6:	bc 90       	ld	r11, X
 5e8:	13 97       	sbiw	r26, 0x03	; 3
        u08 senseRow = disp->senseRowColumn >> 4;

        /* If we're at the start of a new frame... */
        if (litBitIndex == 7 &&
 5ea:	17 30       	cpi	r17, 0x07	; 7
 5ec:	01 f4       	brne	.+0      	; 0x5ee <dm_timerHandler+0x8a>
 5ee:	00 23       	and	r16, r16
 5f0:	01 f4       	brne	.+0      	; 0x5f2 <dm_timerHandler+0x8e>
            //	  oldRowCtlPtr = rowCtlPtr;
            /* Set up the color choice for this frame */
#ifdef PALETTE
            if (disp->paletteCountdown < disp->paletteSelected)
#else
                if (0 == disp->paletteSelected) /* palette zero = orange */
 5f2:	ef 81       	ldd	r30, Y+7	; 0x07
 5f4:	f8 85       	ldd	r31, Y+8	; 0x08
 5f6:	47 8d       	ldd	r20, Z+31	; 0x1f
 5f8:	44 23       	and	r20, r20
 5fa:	01 f4       	brne	.+0      	; 0x5fc <dm_timerHandler+0x98>
static void dm_rollLeft(struct _display * display, u08 count);
static void dm_clearRows(struct _display * display, u08 start, u08 count);
static void dm_clearColumns(struct _display * display, u08 start, u08 count);


void dm_timerHandler(void)
 5fc:	a3 01       	movw	r20, r6
 5fe:	40 50       	subi	r20, 0x00	; 0
 600:	50 40       	sbci	r21, 0x00	; 0
 602:	00 c0       	rjmp	.+0      	; 0x604 <dm_timerHandler+0xa0>
 604:	a3 01       	movw	r20, r6
 606:	40 50       	subi	r20, 0x00	; 0
 608:	50 40       	sbci	r21, 0x00	; 0
                {
                    disp->rowCtlPtr = &rowCtlOrange[whichIndex][0]; 
                }
                else
                {
                    disp->rowCtlPtr = &rowCtlGreen[whichIndex][0]; /* palette 1 == green */
 60a:	11 96       	adiw	r26, 0x01	; 1
 60c:	5c 93       	st	X, r21
 60e:	4e 93       	st	-X, r20
                }
            if (rowCtlPtr != disp->rowCtlPtr) /*  If we changed palettes... */
 610:	4d 91       	ld	r20, X+
 612:	5c 91       	ld	r21, X
 614:	11 97       	sbiw	r26, 0x01	; 1
 616:	84 17       	cp	r24, r20
 618:	95 07       	cpc	r25, r21
 61a:	01 f0       	breq	.+0      	; 0x61c <dm_timerHandler+0xb8>
            {
                oldRowCtlPtr = rowCtlPtr; /* get the old palette pointer */
                rowCtlPtr = disp->rowCtlPtr; /* get the new palette pointer */
                disp->oldRowCtlPtr = oldRowCtlPtr; /* store the old palette pointer */
 61c:	13 96       	adiw	r26, 0x03	; 3
 61e:	9c 93       	st	X, r25
 620:	8e 93       	st	-X, r24
 622:	12 97       	sbiw	r26, 0x02	; 2
 624:	5c 01       	movw	r10, r24
 626:	ca 01       	movw	r24, r20
 628:	00 c0       	rjmp	.+0      	; 0x62a <dm_timerHandler+0xc6>
                disp->paletteCountdown = PALETTE_COUNTDOWN_INIT;
            }
#endif
        }
        u08 data;
        if (litBitIndex < 7)		/* if we're in a frame, restore the current data */
 62a:	17 30       	cpi	r17, 0x07	; 7
 62c:	00 f4       	brcc	.+0      	; 0x62e <dm_timerHandler+0xca>
        {
            data = disp->currentColumn;
 62e:	ef 81       	ldd	r30, Y+7	; 0x07
 630:	f8 85       	ldd	r31, Y+8	; 0x08
 632:	f5 8c       	ldd	r15, Z+29	; 0x1d
 634:	00 c0       	rjmp	.+0      	; 0x636 <dm_timerHandler+0xd2>
        }
        else
        {
            data = disp->bitsOut[colIndex]; /* else read from frame buffer */
 636:	69 e2       	ldi	r22, 0x29	; 41
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	46 9e       	mul	r4, r22
 63c:	a0 01       	movw	r20, r0
 63e:	47 9e       	mul	r4, r23
 640:	50 0d       	add	r21, r0
 642:	56 9e       	mul	r5, r22
 644:	50 0d       	add	r21, r0
 646:	11 24       	eor	r1, r1
 648:	40 50       	subi	r20, 0x00	; 0
 64a:	50 40       	sbci	r21, 0x00	; 0
 64c:	40 0f       	add	r20, r16
 64e:	51 1d       	adc	r21, r1
 650:	fa 01       	movw	r30, r20
 652:	f1 8c       	ldd	r15, Z+25	; 0x19
            litBitIndex = 0;
 654:	10 e0       	ldi	r17, 0x00	; 0
        }
      
        u08 * colOnPort = pgm_read_byte_near(colCtlPtr + offsetof(PortPin, port));
 656:	f6 01       	movw	r30, r12
 658:	44 91       	lpm	r20, Z+
 65a:	64 2f       	mov	r22, r20
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	7a 83       	std	Y+2, r23	; 0x02
 660:	69 83       	std	Y+1, r22	; 0x01
        u08 colOnBit = pgm_read_byte_near(colCtlPtr + offsetof(PortPin, pin));
 662:	32 96       	adiw	r30, 0x02	; 2
 664:	24 90       	lpm	r2, Z+
      
        /* If we're starting a new frame... */
        if (litBitIndex == 0)
 666:	11 23       	and	r17, r17
 668:	01 f4       	brne	.+0      	; 0x66a <dm_timerHandler+0x106>
        {
            (*disp->litPort) |= _BV(disp->litBit); /* turn off the previous column */
 66a:	14 96       	adiw	r26, 0x04	; 4
 66c:	ed 91       	ld	r30, X+
 66e:	fc 91       	ld	r31, X
 670:	15 97       	sbiw	r26, 0x05	; 5
 672:	a9 01       	movw	r20, r18
 674:	16 96       	adiw	r26, 0x06	; 6
 676:	0c 90       	ld	r0, X
 678:	16 97       	sbiw	r26, 0x06	; 6
 67a:	00 c0       	rjmp	.+0      	; 0x67c <dm_timerHandler+0x118>
 67c:	44 0f       	add	r20, r20
 67e:	55 1f       	adc	r21, r21
 680:	0a 94       	dec	r0
 682:	02 f4       	brpl	.+0      	; 0x684 <dm_timerHandler+0x120>
 684:	60 81       	ld	r22, Z
 686:	64 2b       	or	r22, r20
 688:	60 83       	st	Z, r22
            disp->litPort = colOnPort;		 /* store the new column port */
 68a:	e9 81       	ldd	r30, Y+1	; 0x01
 68c:	fa 81       	ldd	r31, Y+2	; 0x02
 68e:	15 96       	adiw	r26, 0x05	; 5
 690:	fc 93       	st	X, r31
 692:	ee 93       	st	-X, r30
 694:	14 97       	sbiw	r26, 0x04	; 4
            disp->litBit = colOnBit;		 /* store the new column bit */
 696:	16 96       	adiw	r26, 0x06	; 6
 698:	2c 92       	st	X, r2
 69a:	16 97       	sbiw	r26, 0x06	; 6
            data = disp->currentColumn;
        }
        else
        {
            data = disp->bitsOut[colIndex]; /* else read from frame buffer */
            litBitIndex = 0;
 69c:	cc 24       	eor	r12, r12
 69e:	dd 24       	eor	r13, r13
 6a0:	99 24       	eor	r9, r9
 6a2:	80 2e       	mov	r8, r16
 6a4:	a5 01       	movw	r20, r10
 6a6:	e2 2c       	mov	r14, r2
 6a8:	2f 80       	ldd	r2, Y+7	; 0x07
 6aa:	38 84       	ldd	r3, Y+8	; 0x08
 6ac:	5d 01       	movw	r10, r26
                rowCtlPtr += sizeof(PortPin); /* point to the next row */
                oldRowCtlPtr += sizeof(PortPin); /* point to the next row */
                continue;
            }
#endif
            u08 * newPort = pgm_read_byte_near(rowCtlPtr + offsetof(PortPin, port));
 6ae:	fc 01       	movw	r30, r24
 6b0:	a4 91       	lpm	r26, Z+
 6b2:	b0 e0       	ldi	r27, 0x00	; 0
            u08 newBit = pgm_read_byte_near(rowCtlPtr + offsetof(PortPin, pin));
 6b4:	bc 01       	movw	r22, r24
 6b6:	6e 5f       	subi	r22, 0xFE	; 254
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	fb 01       	movw	r30, r22
 6bc:	f4 91       	lpm	r31, Z+
 6be:	fd 83       	std	Y+5, r31	; 0x05
            u08 * oldPort = pgm_read_byte_near(oldRowCtlPtr + offsetof(PortPin, port));
 6c0:	fa 01       	movw	r30, r20
 6c2:	64 91       	lpm	r22, Z+
 6c4:	e6 2f       	mov	r30, r22
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	f8 87       	std	Y+8, r31	; 0x08
 6ca:	ef 83       	std	Y+7, r30	; 0x07
            u08 oldBit = pgm_read_byte_near(oldRowCtlPtr + offsetof(PortPin, pin));
 6cc:	fa 01       	movw	r30, r20
 6ce:	32 96       	adiw	r30, 0x02	; 2
 6d0:	e4 91       	lpm	r30, Z+

            (*oldPort) &= ~_BV(oldBit); /* turn off the bit of the previous column */
 6d2:	b9 01       	movw	r22, r18
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <dm_timerHandler+0x172>
 6d6:	66 0f       	add	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	ea 95       	dec	r30
 6dc:	02 f4       	brpl	.+0      	; 0x6de <dm_timerHandler+0x17a>
 6de:	76 2f       	mov	r23, r22
 6e0:	70 95       	com	r23
 6e2:	ef 81       	ldd	r30, Y+7	; 0x07
 6e4:	f8 85       	ldd	r31, Y+8	; 0x08
 6e6:	60 81       	ld	r22, Z
 6e8:	67 23       	and	r22, r23
 6ea:	60 83       	st	Z, r22
      
            if (litBits >= BITSPERSCAN ||
 6ec:	f9 2d       	mov	r31, r9
 6ee:	f2 30       	cpi	r31, 0x02	; 2
 6f0:	00 f4       	brcc	.+0      	; 0x6f2 <dm_timerHandler+0x18e>
 6f2:	c1 16       	cp	r12, r17
 6f4:	00 f4       	brcc	.+0      	; 0x6f6 <dm_timerHandler+0x192>
                count < litBitIndex)
            {
                    (*newPort) &= ~_BV(newBit); /* turn off the bit on this column */
 6f6:	b9 01       	movw	r22, r18
 6f8:	0d 80       	ldd	r0, Y+5	; 0x05
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <dm_timerHandler+0x198>
 6fc:	66 0f       	add	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	0a 94       	dec	r0
 702:	02 f4       	brpl	.+0      	; 0x704 <dm_timerHandler+0x1a0>
 704:	e6 2f       	mov	r30, r22
 706:	e0 95       	com	r30
 708:	6c 91       	ld	r22, X
 70a:	6e 23       	and	r22, r30
 70c:	6c 93       	st	X, r22
 70e:	00 c0       	rjmp	.+0      	; 0x710 <dm_timerHandler+0x1ac>
            }
            else
            {
                if (data & (1 << count))
 710:	6f 2d       	mov	r22, r15
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	0c 2c       	mov	r0, r12
 716:	00 c0       	rjmp	.+0      	; 0x718 <dm_timerHandler+0x1b4>
 718:	75 95       	asr	r23
 71a:	67 95       	ror	r22
 71c:	0a 94       	dec	r0
 71e:	02 f4       	brpl	.+0      	; 0x720 <dm_timerHandler+0x1bc>
 720:	ec 91       	ld	r30, X
 722:	e9 87       	std	Y+9, r30	; 0x09
 724:	f9 01       	movw	r30, r18
 726:	0d 80       	ldd	r0, Y+5	; 0x05
 728:	00 c0       	rjmp	.+0      	; 0x72a <dm_timerHandler+0x1c6>
 72a:	ee 0f       	add	r30, r30
 72c:	ff 1f       	adc	r31, r31
 72e:	0a 94       	dec	r0
 730:	02 f4       	brpl	.+0      	; 0x732 <dm_timerHandler+0x1ce>
 732:	f8 87       	std	Y+8, r31	; 0x08
 734:	ef 83       	std	Y+7, r30	; 0x07
 736:	60 ff       	sbrs	r22, 0
 738:	00 c0       	rjmp	.+0      	; 0x73a <dm_timerHandler+0x1d6>
                {
                    (*newPort) |= _BV(newBit);
 73a:	ef 81       	ldd	r30, Y+7	; 0x07
 73c:	f9 85       	ldd	r31, Y+9	; 0x09
 73e:	ef 2b       	or	r30, r31
 740:	ec 93       	st	X, r30
                    litBitIndex = count;
                    litBits++;
 742:	93 94       	inc	r9
                    data &= ~(1 << count);
 744:	b9 01       	movw	r22, r18
 746:	0c 2c       	mov	r0, r12
 748:	00 c0       	rjmp	.+0      	; 0x74a <dm_timerHandler+0x1e6>
 74a:	66 0f       	add	r22, r22
 74c:	77 1f       	adc	r23, r23
 74e:	0a 94       	dec	r0
 750:	02 f4       	brpl	.+0      	; 0x752 <dm_timerHandler+0x1ee>
 752:	8b 01       	movw	r16, r22
 754:	00 95       	com	r16
 756:	f0 22       	and	r15, r16
 758:	1c 2d       	mov	r17, r12
 75a:	00 c0       	rjmp	.+0      	; 0x75c <dm_timerHandler+0x1f8>
                }
                else
                {
                    (*newPort) &= ~_BV(newBit);
 75c:	ef 81       	ldd	r30, Y+7	; 0x07
 75e:	e0 95       	com	r30
 760:	79 85       	ldd	r23, Y+9	; 0x09
 762:	e7 23       	and	r30, r23
 764:	ec 93       	st	X, r30
 766:	08 94       	sec
 768:	c1 1c       	adc	r12, r1
 76a:	d1 1c       	adc	r13, r1

        /* run through the current columns respecting BITSPERSCAN */
        /* run through bits 0-6 (all LEDs in the current lit column). */
        /* Turn them all off at every run. Once count > litBitIndex, illuminate up to */
        /* BITSPERSCAN LEDs. */
        for (count = 0; count < 7; count++)
 76c:	e7 e0       	ldi	r30, 0x07	; 7
 76e:	ce 16       	cp	r12, r30
 770:	d1 04       	cpc	r13, r1
 772:	01 f0       	breq	.+0      	; 0x774 <dm_timerHandler+0x210>
                else
                {
                    (*newPort) &= ~_BV(newBit);
                }
            }
            rowCtlPtr += sizeof(PortPin); /* point to the next row */
 774:	03 96       	adiw	r24, 0x03	; 3
            oldRowCtlPtr += sizeof(PortPin); /* point to the next row */
 776:	4d 5f       	subi	r20, 0xFD	; 253
 778:	5f 4f       	sbci	r21, 0xFF	; 255
 77a:	00 c0       	rjmp	.+0      	; 0x77c <dm_timerHandler+0x218>
 77c:	08 2d       	mov	r16, r8
 77e:	38 86       	std	Y+8, r3	; 0x08
 780:	2f 82       	std	Y+7, r2	; 0x07
 782:	d5 01       	movw	r26, r10
        }
        //      litBitIndex = newDataBit;	/* store the index of the bit to light next */

        /* If display is not blanked, turn on the current column */
        if ((flags & FLAG_BLANK) == 0)
 784:	fe 81       	ldd	r31, Y+6	; 0x06
 786:	f5 fd       	sbrc	r31, 5
 788:	00 c0       	rjmp	.+0      	; 0x78a <dm_timerHandler+0x226>
        {
            (*colOnPort) &= ~_BV(colOnBit);
 78a:	f9 01       	movw	r30, r18
 78c:	0e 2c       	mov	r0, r14
 78e:	00 c0       	rjmp	.+0      	; 0x790 <dm_timerHandler+0x22c>
 790:	ee 0f       	add	r30, r30
 792:	ff 1f       	adc	r31, r31
 794:	0a 94       	dec	r0
 796:	02 f4       	brpl	.+0      	; 0x798 <dm_timerHandler+0x234>
 798:	9e 2f       	mov	r25, r30
 79a:	90 95       	com	r25
 79c:	e9 81       	ldd	r30, Y+1	; 0x01
 79e:	fa 81       	ldd	r31, Y+2	; 0x02
 7a0:	80 81       	ld	r24, Z
 7a2:	89 23       	and	r24, r25
 7a4:	80 83       	st	Z, r24
        }
      
        disp->currentColumn = data;
 7a6:	ef 81       	ldd	r30, Y+7	; 0x07
 7a8:	f8 85       	ldd	r31, Y+8	; 0x08
 7aa:	f5 8e       	std	Z+29, r15	; 0x1d
      
        //      if ((data >> litBitIndex) == 0)
        if (0 == data)
 7ac:	ff 20       	and	r15, r15
 7ae:	01 f4       	brne	.+0      	; 0x7b0 <dm_timerHandler+0x24c>
        {
            litBitIndex = 7;
            ++colIndex;
 7b0:	0f 5f       	subi	r16, 0xFF	; 255
	  
            if (colIndex == NUM_COLUMNS)
 7b2:	05 30       	cpi	r16, 0x05	; 5
 7b4:	01 f4       	brne	.+0      	; 0x7b6 <dm_timerHandler+0x252>
            {
                colIndex = 0;
 7b6:	00 e0       	ldi	r16, 0x00	; 0
        disp->currentColumn = data;
      
        //      if ((data >> litBitIndex) == 0)
        if (0 == data)
        {
            litBitIndex = 7;
 7b8:	17 e0       	ldi	r17, 0x07	; 7
            if (colIndex == NUM_COLUMNS)
            {
                colIndex = 0;
            }
        }
        disp->currentColumnBit = litBitIndex;
 7ba:	ef 81       	ldd	r30, Y+7	; 0x07
 7bc:	f8 85       	ldd	r31, Y+8	; 0x08
 7be:	16 8f       	std	Z+30, r17	; 0x1e
        disp->colIndex = colIndex;
 7c0:	00 83       	st	Z, r16
 7c2:	08 94       	sec
 7c4:	41 1c       	adc	r4, r1
 7c6:	51 1c       	adc	r5, r1
 7c8:	b9 96       	adiw	r30, 0x29	; 41
 7ca:	f8 87       	std	Y+8, r31	; 0x08
 7cc:	ef 83       	std	Y+7, r30	; 0x07
 7ce:	4b 81       	ldd	r20, Y+3	; 0x03
 7d0:	5c 81       	ldd	r21, Y+4	; 0x04
 7d2:	41 5f       	subi	r20, 0xF1	; 241
 7d4:	5f 4f       	sbci	r21, 0xFF	; 255
 7d6:	5c 83       	std	Y+4, r21	; 0x04
 7d8:	4b 83       	std	Y+3, r20	; 0x03
 7da:	99 96       	adiw	r26, 0x29	; 41
 7dc:	65 e1       	ldi	r22, 0x15	; 21
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	66 0e       	add	r6, r22
 7e2:	77 1e       	adc	r7, r23

void dm_timerHandler(void)
{
    u08 whichIndex = 0;

    for (whichIndex = 0; whichIndex < NUM_DISPLAYS; whichIndex++)
 7e4:	72 e0       	ldi	r23, 0x02	; 2
 7e6:	47 16       	cp	r4, r23
 7e8:	51 04       	cpc	r5, r1
 7ea:	01 f0       	breq	.+0      	; 0x7ec <dm_timerHandler+0x288>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <dm_timerHandler+0x28a>
            }
        }
        disp->currentColumnBit = litBitIndex;
        disp->colIndex = colIndex;
    }
}
 7ee:	29 96       	adiw	r28, 0x09	; 9
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	f8 94       	cli
 7f4:	de bf       	out	0x3e, r29	; 62
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	cd bf       	out	0x3d, r28	; 61
 7fa:	cf 91       	pop	r28
 7fc:	df 91       	pop	r29
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	ff 90       	pop	r15
 804:	ef 90       	pop	r14
 806:	df 90       	pop	r13
 808:	cf 90       	pop	r12
 80a:	bf 90       	pop	r11
 80c:	af 90       	pop	r10
 80e:	9f 90       	pop	r9
 810:	8f 90       	pop	r8
 812:	7f 90       	pop	r7
 814:	6f 90       	pop	r6
 816:	5f 90       	pop	r5
 818:	4f 90       	pop	r4
 81a:	3f 90       	pop	r3
 81c:	2f 90       	pop	r2
 81e:	08 95       	ret

00000820 <dm_init>:

void dm_init(void)
{
    memset(display, 0, sizeof(display));
 820:	82 e5       	ldi	r24, 0x52	; 82
 822:	e0 e0       	ldi	r30, 0x00	; 0
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	df 01       	movw	r26, r30
 828:	1d 92       	st	X+, r1
 82a:	8a 95       	dec	r24
 82c:	01 f4       	brne	.+0      	; 0x82e <dm_init+0xe>
    display[0].txList[0] = TRANSFORM_EOL;
 82e:	8f e0       	ldi	r24, 0x0F	; 15
 830:	80 93 00 00 	sts	0x0000, r24
    display[1].txList[0] = TRANSFORM_EOL;
 834:	80 93 00 00 	sts	0x0000, r24

    MCUCR |= PUD;
 838:	85 b7       	in	r24, 0x35	; 53
 83a:	84 60       	ori	r24, 0x04	; 4
 83c:	85 bf       	out	0x35, r24	; 53

#ifdef KB_TBC12
    /* Enable pullup resistors for row drivers */
/*   PORTE = 0x0c; */
    /* Enable pullup resistors general purpose input */
    PORTE = 0xc3;
 83e:	83 ec       	ldi	r24, 0xC3	; 195
 840:	8e b9       	out	0x0e, r24	; 14
   
    /* Set direction */
    DDRA = 0xff; /*76543210 1111 1111  */
 842:	4f ef       	ldi	r20, 0xFF	; 255
 844:	41 b9       	out	0x01, r20	; 1
    DDRB |= 0xf0;  /*7654 1111 0000 */
 846:	84 b1       	in	r24, 0x04	; 4
 848:	80 6f       	ori	r24, 0xF0	; 240
 84a:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xff; /*76543210 1111 1111  */
 84c:	47 b9       	out	0x07, r20	; 7
    DDRD = 0x7f; /* 210 0111 1111 bits 3-6 are general purpose output*/
 84e:	8f e7       	ldi	r24, 0x7F	; 127
 850:	8a b9       	out	0x0a, r24	; 10
    DDRE = 0x0c; /* 32 0000 1100*/
 852:	8c e0       	ldi	r24, 0x0C	; 12
 854:	8d b9       	out	0x0d, r24	; 13
    DDRF = 0xff; /* 76543210 11111111*/
 856:	40 bb       	out	0x10, r20	; 16
    DDRG = 0x1f; /* 43210 0001 1111*/
 858:	9f e1       	ldi	r25, 0x1F	; 31
 85a:	93 bb       	out	0x13, r25	; 19

    PORTB |= 0xc0; /* 1100 0000 */
 85c:	85 b1       	in	r24, 0x05	; 5
 85e:	80 6c       	ori	r24, 0xC0	; 192
 860:	85 b9       	out	0x05, r24	; 5
    PORTC = 0x1f; /* 0001 1111 */
 862:	98 b9       	out	0x08, r25	; 8
    PORTD = 0xf9; /* 1111 1001 */
 864:	89 ef       	ldi	r24, 0xF9	; 249
 866:	8b b9       	out	0x0b, r24	; 11
    PORTE &= 0xf3;
 868:	8e b1       	in	r24, 0x0e	; 14
 86a:	83 7f       	andi	r24, 0xF3	; 243
 86c:	8e b9       	out	0x0e, r24	; 14
    PORTG = 0x18; /* 0001 1000 */
 86e:	88 e1       	ldi	r24, 0x18	; 24
 870:	84 bb       	out	0x14, r24	; 20
    PORTF = 0;
 872:	11 ba       	out	0x11, r1	; 17

    display[0].colIndex = 4;
 874:	84 e0       	ldi	r24, 0x04	; 4
 876:	80 93 00 00 	sts	0x0000, r24
    display[1].colIndex = 4;
 87a:	80 93 00 00 	sts	0x0000, r24
    display[0].rowCtlPtr = &rowCtlGreen[0][0];
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	90 93 00 00 	sts	0x0000, r25
 886:	80 93 00 00 	sts	0x0000, r24
    display[1].rowCtlPtr = &rowCtlGreen[1][0];
 88a:	9c 01       	movw	r18, r24
 88c:	2b 5e       	subi	r18, 0xEB	; 235
 88e:	3f 4f       	sbci	r19, 0xFF	; 255
 890:	30 93 00 00 	sts	0x0000, r19
 894:	20 93 00 00 	sts	0x0000, r18
    display[0].oldRowCtlPtr = &rowCtlGreen[0][0];
 898:	90 93 00 00 	sts	0x0000, r25
 89c:	80 93 00 00 	sts	0x0000, r24
    display[1].oldRowCtlPtr = &rowCtlGreen[1][0];
 8a0:	30 93 00 00 	sts	0x0000, r19
 8a4:	20 93 00 00 	sts	0x0000, r18
    display[0].currentColumnBit = 7;
 8a8:	87 e0       	ldi	r24, 0x07	; 7
 8aa:	80 93 00 00 	sts	0x0000, r24
    display[1].currentColumnBit = 7;
 8ae:	80 93 00 00 	sts	0x0000, r24
    display[0].litPort = PORTC;
    display[0].litBit = 4;
    display[1].litPort = PORTB;
    display[1].litBit = 6;
#endif
    display[0].senseRowColumn = 0xff;
 8b2:	40 93 00 00 	sts	0x0000, r20
    display[1].senseRowColumn = 0xff;
 8b6:	40 93 00 00 	sts	0x0000, r20
#if 0
    TCCR0A = _BV(CS00) | _BV(CS02);		/* Timer 0 prescaler =CLK/256 */ 
#endif
}
 8ba:	08 95       	ret

000008bc <dm_setChar>:


void dm_setChar(u08 which, u08 set)
{
    display[which].charIndex = set;
 8bc:	48 2f       	mov	r20, r24
 8be:	50 e0       	ldi	r21, 0x00	; 0
 8c0:	29 e2       	ldi	r18, 0x29	; 41
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	42 9f       	mul	r20, r18
 8c6:	f0 01       	movw	r30, r0
 8c8:	43 9f       	mul	r20, r19
 8ca:	f0 0d       	add	r31, r0
 8cc:	52 9f       	mul	r21, r18
 8ce:	f0 0d       	add	r31, r0
 8d0:	11 24       	eor	r1, r1
 8d2:	e0 50       	subi	r30, 0x00	; 0
 8d4:	f0 40       	sbci	r31, 0x00	; 0
 8d6:	60 83       	st	Z, r22
    dm_applyTransforms(which);
 8d8:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
}
 8dc:	08 95       	ret

000008de <dm_setReverse>:
/*   sei(); */
/*   TIMSK0 |= _BV(TOIE0); */
}

void dm_setReverse(u08 which, u08 set)
{
 8de:	cf 93       	push	r28
 8e0:	c8 2f       	mov	r28, r24
    switch (set)
 8e2:	66 23       	and	r22, r22
 8e4:	01 f0       	breq	.+0      	; 0x8e6 <dm_setReverse+0x8>
 8e6:	61 30       	cpi	r22, 0x01	; 1
 8e8:	01 f4       	brne	.+0      	; 0x8ea <dm_setReverse+0xc>
 8ea:	00 c0       	rjmp	.+0      	; 0x8ec <dm_setReverse+0xe>
    {
    case 0: dm_deleteTransform(which, TRANSFORM_REVERSE); break;
 8ec:	62 e0       	ldi	r22, 0x02	; 2
 8ee:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
 8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <dm_setReverse+0x16>
    case 1: dm_setTransform(which, TRANSFORM_REVERSE); break;
 8f4:	62 e0       	ldi	r22, 0x02	; 2
 8f6:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
    }
    dm_applyTransforms(which);
 8fa:	8c 2f       	mov	r24, r28
 8fc:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
}
 900:	cf 91       	pop	r28
 902:	08 95       	ret

00000904 <dm_setFlip>:

void dm_setFlip(u08 which, u08 set)
{
 904:	cf 93       	push	r28
 906:	c8 2f       	mov	r28, r24
    switch (set)
 908:	66 23       	and	r22, r22
 90a:	01 f0       	breq	.+0      	; 0x90c <dm_setFlip+0x8>
 90c:	61 30       	cpi	r22, 0x01	; 1
 90e:	01 f4       	brne	.+0      	; 0x910 <dm_setFlip+0xc>
 910:	00 c0       	rjmp	.+0      	; 0x912 <dm_setFlip+0xe>
    {
    case 0: dm_deleteTransform(which, TRANSFORM_FLIP); break;
 912:	60 e0       	ldi	r22, 0x00	; 0
 914:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
 918:	00 c0       	rjmp	.+0      	; 0x91a <dm_setFlip+0x16>
    case 1: dm_setTransform(which, TRANSFORM_FLIP); break;
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
    }
    dm_applyTransforms(which);
 920:	8c 2f       	mov	r24, r28
 922:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
}
 926:	cf 91       	pop	r28
 928:	08 95       	ret

0000092a <dm_setMirror>:

void dm_setMirror(u08 which, u08 set)
{
 92a:	cf 93       	push	r28
 92c:	c8 2f       	mov	r28, r24
    switch (set)
 92e:	66 23       	and	r22, r22
 930:	01 f0       	breq	.+0      	; 0x932 <dm_setMirror+0x8>
 932:	61 30       	cpi	r22, 0x01	; 1
 934:	01 f4       	brne	.+0      	; 0x936 <dm_setMirror+0xc>
 936:	00 c0       	rjmp	.+0      	; 0x938 <dm_setMirror+0xe>
    {
    case 0: dm_deleteTransform(which, TRANSFORM_MIRROR); break;
 938:	61 e0       	ldi	r22, 0x01	; 1
 93a:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
 93e:	00 c0       	rjmp	.+0      	; 0x940 <dm_setMirror+0x16>
    case 1: dm_setTransform(which, TRANSFORM_MIRROR); break;
 940:	61 e0       	ldi	r22, 0x01	; 1
 942:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
    }
    dm_applyTransforms(which);
 946:	8c 2f       	mov	r24, r28
 948:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
}
 94c:	cf 91       	pop	r28
 94e:	08 95       	ret

00000950 <dm_displayProgrammed>:


void dm_displayProgrammed(u08 which, u08 set)
{
    switch (set)
 950:	66 23       	and	r22, r22
 952:	01 f0       	breq	.+0      	; 0x954 <dm_displayProgrammed+0x4>
 954:	61 30       	cpi	r22, 0x01	; 1
 956:	01 f4       	brne	.+0      	; 0x958 <dm_displayProgrammed+0x8>
 958:	00 c0       	rjmp	.+0      	; 0x95a <dm_displayProgrammed+0xa>
    {
    case 0: display[which].flags &= ~FLAG_PROGCOLS; break;
 95a:	48 2f       	mov	r20, r24
 95c:	50 e0       	ldi	r21, 0x00	; 0
 95e:	29 e2       	ldi	r18, 0x29	; 41
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	42 9f       	mul	r20, r18
 964:	f0 01       	movw	r30, r0
 966:	43 9f       	mul	r20, r19
 968:	f0 0d       	add	r31, r0
 96a:	52 9f       	mul	r21, r18
 96c:	f0 0d       	add	r31, r0
 96e:	11 24       	eor	r1, r1
 970:	e0 50       	subi	r30, 0x00	; 0
 972:	f0 40       	sbci	r31, 0x00	; 0
 974:	92 81       	ldd	r25, Z+2	; 0x02
 976:	9f 7e       	andi	r25, 0xEF	; 239
 978:	00 c0       	rjmp	.+0      	; 0x97a <dm_displayProgrammed+0x2a>
    case 1: display[which].flags |= FLAG_PROGCOLS; break;
 97a:	48 2f       	mov	r20, r24
 97c:	50 e0       	ldi	r21, 0x00	; 0
 97e:	29 e2       	ldi	r18, 0x29	; 41
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	42 9f       	mul	r20, r18
 984:	f0 01       	movw	r30, r0
 986:	43 9f       	mul	r20, r19
 988:	f0 0d       	add	r31, r0
 98a:	52 9f       	mul	r21, r18
 98c:	f0 0d       	add	r31, r0
 98e:	11 24       	eor	r1, r1
 990:	e0 50       	subi	r30, 0x00	; 0
 992:	f0 40       	sbci	r31, 0x00	; 0
 994:	92 81       	ldd	r25, Z+2	; 0x02
 996:	90 61       	ori	r25, 0x10	; 16
 998:	92 83       	std	Z+2, r25	; 0x02
    }
    dm_applyTransforms(which);
 99a:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
}
 99e:	08 95       	ret

000009a0 <dm_blank>:

void dm_blank(u08 which, u08 set)
{
 9a0:	90 e0       	ldi	r25, 0x00	; 0
    if (set)
 9a2:	66 23       	and	r22, r22
 9a4:	01 f0       	breq	.+0      	; 0x9a6 <dm_blank+0x6>
    {
        display[which].flags |= FLAG_BLANK;
 9a6:	29 e2       	ldi	r18, 0x29	; 41
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	82 9f       	mul	r24, r18
 9ac:	f0 01       	movw	r30, r0
 9ae:	83 9f       	mul	r24, r19
 9b0:	f0 0d       	add	r31, r0
 9b2:	92 9f       	mul	r25, r18
 9b4:	f0 0d       	add	r31, r0
 9b6:	11 24       	eor	r1, r1
 9b8:	e0 50       	subi	r30, 0x00	; 0
 9ba:	f0 40       	sbci	r31, 0x00	; 0
 9bc:	82 81       	ldd	r24, Z+2	; 0x02
 9be:	80 62       	ori	r24, 0x20	; 32
 9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <dm_blank+0x22>
    }
    else
    {
        display[which].flags &= ~FLAG_BLANK;
 9c2:	29 e2       	ldi	r18, 0x29	; 41
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	82 9f       	mul	r24, r18
 9c8:	f0 01       	movw	r30, r0
 9ca:	83 9f       	mul	r24, r19
 9cc:	f0 0d       	add	r31, r0
 9ce:	92 9f       	mul	r25, r18
 9d0:	f0 0d       	add	r31, r0
 9d2:	11 24       	eor	r1, r1
 9d4:	e0 50       	subi	r30, 0x00	; 0
 9d6:	f0 40       	sbci	r31, 0x00	; 0
 9d8:	82 81       	ldd	r24, Z+2	; 0x02
 9da:	8f 7d       	andi	r24, 0xDF	; 223
 9dc:	82 83       	std	Z+2, r24	; 0x02
 9de:	08 95       	ret

000009e0 <dm_shift>:
    }
}

void dm_shift(u08 which, u08 direction, u08 count)
{
 9e0:	0f 93       	push	r16
 9e2:	1f 93       	push	r17
 9e4:	cf 93       	push	r28
 9e6:	df 93       	push	r29
 9e8:	18 2f       	mov	r17, r24
 9ea:	04 2f       	mov	r16, r20
    struct _display * disp = &display[which];
    switch (count)
 9ec:	44 23       	and	r20, r20
 9ee:	01 f4       	brne	.+0      	; 0x9f0 <dm_shift+0x10>
    {
    case 0:
        switch (direction)
 9f0:	6c 36       	cpi	r22, 0x6C	; 108
 9f2:	01 f0       	breq	.+0      	; 0x9f4 <dm_shift+0x14>
 9f4:	6d 36       	cpi	r22, 0x6D	; 109
 9f6:	00 f4       	brcc	.+0      	; 0x9f8 <dm_shift+0x18>
 9f8:	64 36       	cpi	r22, 0x64	; 100
 9fa:	01 f0       	breq	.+0      	; 0x9fc <dm_shift+0x1c>
 9fc:	00 c0       	rjmp	.+0      	; 0x9fe <dm_shift+0x1e>
 9fe:	00 c0       	rjmp	.+0      	; 0xa00 <dm_shift+0x20>
 a00:	62 37       	cpi	r22, 0x72	; 114
 a02:	01 f0       	breq	.+0      	; 0xa04 <dm_shift+0x24>
 a04:	65 37       	cpi	r22, 0x75	; 117
 a06:	01 f0       	breq	.+0      	; 0xa08 <dm_shift+0x28>
 a08:	00 c0       	rjmp	.+0      	; 0xa0a <dm_shift+0x2a>
        {
        case 'u':
        case 'd':
            dm_deleteTransform(which, TRANSFORM_SHIFT_VERT);
 a0a:	81 2f       	mov	r24, r17
 a0c:	65 e0       	ldi	r22, 0x05	; 5
 a0e:	00 c0       	rjmp	.+0      	; 0xa10 <dm_shift+0x30>
            break;

        case 'l':
        case 'r':
            dm_deleteTransform(which, TRANSFORM_SHIFT_HORZ);
 a10:	81 2f       	mov	r24, r17
 a12:	66 e0       	ldi	r22, 0x06	; 6
 a14:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
            break;
 a18:	00 c0       	rjmp	.+0      	; 0xa1a <dm_shift+0x3a>
    }
}

void dm_shift(u08 which, u08 direction, u08 count)
{
    struct _display * disp = &display[which];
 a1a:	c8 2f       	mov	r28, r24
 a1c:	d0 e0       	ldi	r29, 0x00	; 0
        }
        break;

/*     case 1: */
    default:
        switch (direction)
 a1e:	6c 36       	cpi	r22, 0x6C	; 108
 a20:	01 f0       	breq	.+0      	; 0xa22 <dm_shift+0x42>
 a22:	6d 36       	cpi	r22, 0x6D	; 109
 a24:	00 f4       	brcc	.+0      	; 0xa26 <dm_shift+0x46>
 a26:	64 36       	cpi	r22, 0x64	; 100
 a28:	01 f4       	brne	.+0      	; 0xa2a <dm_shift+0x4a>
 a2a:	00 c0       	rjmp	.+0      	; 0xa2c <dm_shift+0x4c>
 a2c:	62 37       	cpi	r22, 0x72	; 114
 a2e:	01 f0       	breq	.+0      	; 0xa30 <dm_shift+0x50>
 a30:	65 37       	cpi	r22, 0x75	; 117
 a32:	01 f4       	brne	.+0      	; 0xa34 <dm_shift+0x54>
        {
        case 'u':
            dm_setTransform(which, TRANSFORM_SHIFT_VERT);
 a34:	65 e0       	ldi	r22, 0x05	; 5
 a36:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
            dm_setTransformData(disp, 0, DIR_UP | count);
 a3a:	00 61       	ori	r16, 0x10	; 16
 a3c:	00 c0       	rjmp	.+0      	; 0xa3e <dm_shift+0x5e>
            break;

        case 'd':
            dm_setTransform(which, TRANSFORM_SHIFT_VERT);
 a3e:	65 e0       	ldi	r22, 0x05	; 5
 a40:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
            dm_setTransformData(disp, 0, DIR_DOWN | count);
 a44:	00 62       	ori	r16, 0x20	; 32
 a46:	00 c0       	rjmp	.+0      	; 0xa48 <dm_shift+0x68>
            break;

        case 'l':
            dm_setTransform(which, TRANSFORM_SHIFT_HORZ);
 a48:	66 e0       	ldi	r22, 0x06	; 6
 a4a:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
            dm_setTransformData(disp, 0, DIR_LEFT | count);
 a4e:	00 63       	ori	r16, 0x30	; 48
 a50:	00 c0       	rjmp	.+0      	; 0xa52 <dm_shift+0x72>
            break;

        case 'r':
            dm_setTransform(which, TRANSFORM_SHIFT_HORZ);
 a52:	66 e0       	ldi	r22, 0x06	; 6
 a54:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
            dm_setTransformData(disp, 0, DIR_RIGHT | count);
 a58:	00 64       	ori	r16, 0x40	; 64
    return display->txList[display->txListBookmark + index + 1];
}

static void dm_setTransformData(struct _display * display, u08 index, u08 data)
{
    u08 * dataPtr = &display->txList[display->txListBookmark + index];
 a5a:	89 e2       	ldi	r24, 0x29	; 41
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	c8 9f       	mul	r28, r24
 a60:	f0 01       	movw	r30, r0
 a62:	c9 9f       	mul	r28, r25
 a64:	f0 0d       	add	r31, r0
 a66:	d8 9f       	mul	r29, r24
 a68:	f0 0d       	add	r31, r0
 a6a:	11 24       	eor	r1, r1
 a6c:	df 01       	movw	r26, r30
 a6e:	a0 50       	subi	r26, 0x00	; 0
 a70:	b0 40       	sbci	r27, 0x00	; 0
 a72:	53 96       	adiw	r26, 0x13	; 19
 a74:	8c 91       	ld	r24, X
 a76:	53 97       	sbiw	r26, 0x13	; 19
 a78:	90 e0       	ldi	r25, 0x00	; 0
    if (*dataPtr == TRANSFORM_EOL)
 a7a:	a8 0f       	add	r26, r24
 a7c:	b9 1f       	adc	r27, r25
 a7e:	13 96       	adiw	r26, 0x03	; 3
 a80:	2c 91       	ld	r18, X
 a82:	13 97       	sbiw	r26, 0x03	; 3
 a84:	2f 30       	cpi	r18, 0x0F	; 15
 a86:	01 f4       	brne	.+0      	; 0xa88 <dm_shift+0xa8>
    {
        *dataPtr++ = data;
 a88:	13 96       	adiw	r26, 0x03	; 3
 a8a:	0c 93       	st	X, r16
 a8c:	13 97       	sbiw	r26, 0x03	; 3
    return display->txList[display->txListBookmark + index + 1];
}

static void dm_setTransformData(struct _display * display, u08 index, u08 data)
{
    u08 * dataPtr = &display->txList[display->txListBookmark + index];
 a8e:	e8 0f       	add	r30, r24
 a90:	f9 1f       	adc	r31, r25
 a92:	e0 50       	subi	r30, 0x00	; 0
 a94:	f0 40       	sbci	r31, 0x00	; 0
    if (*dataPtr == TRANSFORM_EOL)
    {
        *dataPtr++ = data;
        *dataPtr = TRANSFORM_EOL;
 a96:	21 83       	std	Z+1, r18	; 0x01
 a98:	00 c0       	rjmp	.+0      	; 0xa9a <dm_shift+0xba>
    }
    else
    {
        *dataPtr = data;
 a9a:	13 96       	adiw	r26, 0x03	; 3
 a9c:	0c 93       	st	X, r16
            dm_setTransform(which, TRANSFORM_SHIFT_HORZ);
            dm_setTransformData(disp, 0, DIR_RIGHT | count);
            break;
        }
    }
    dm_applyTransforms(which);
 a9e:	81 2f       	mov	r24, r17
 aa0:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
}
 aa4:	df 91       	pop	r29
 aa6:	cf 91       	pop	r28
 aa8:	1f 91       	pop	r17
 aaa:	0f 91       	pop	r16
 aac:	08 95       	ret

00000aae <dm_roll>:

void dm_roll(u08 which, u08 direction, u08 count)
{
 aae:	0f 93       	push	r16
 ab0:	1f 93       	push	r17
 ab2:	cf 93       	push	r28
 ab4:	df 93       	push	r29
 ab6:	18 2f       	mov	r17, r24
 ab8:	04 2f       	mov	r16, r20
    struct _display * disp = &display[which];
    switch (count)
 aba:	44 23       	and	r20, r20
 abc:	01 f4       	brne	.+0      	; 0xabe <dm_roll+0x10>
    {
    case 0:
        switch (direction)
 abe:	6c 36       	cpi	r22, 0x6C	; 108
 ac0:	01 f0       	breq	.+0      	; 0xac2 <dm_roll+0x14>
 ac2:	6d 36       	cpi	r22, 0x6D	; 109
 ac4:	00 f4       	brcc	.+0      	; 0xac6 <dm_roll+0x18>
 ac6:	64 36       	cpi	r22, 0x64	; 100
 ac8:	01 f0       	breq	.+0      	; 0xaca <dm_roll+0x1c>
 aca:	00 c0       	rjmp	.+0      	; 0xacc <dm_roll+0x1e>
 acc:	00 c0       	rjmp	.+0      	; 0xace <dm_roll+0x20>
 ace:	62 37       	cpi	r22, 0x72	; 114
 ad0:	01 f0       	breq	.+0      	; 0xad2 <dm_roll+0x24>
 ad2:	65 37       	cpi	r22, 0x75	; 117
 ad4:	01 f0       	breq	.+0      	; 0xad6 <dm_roll+0x28>
 ad6:	00 c0       	rjmp	.+0      	; 0xad8 <dm_roll+0x2a>
        {
        case 'u':
        case 'd':
            dm_deleteTransform(which, TRANSFORM_ROLL_VERT);
 ad8:	81 2f       	mov	r24, r17
 ada:	63 e0       	ldi	r22, 0x03	; 3
 adc:	00 c0       	rjmp	.+0      	; 0xade <dm_roll+0x30>
            break;

        case 'l':
        case 'r':
            dm_deleteTransform(which, TRANSFORM_ROLL_HORZ);
 ade:	81 2f       	mov	r24, r17
 ae0:	64 e0       	ldi	r22, 0x04	; 4
 ae2:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
            break;
 ae6:	00 c0       	rjmp	.+0      	; 0xae8 <dm_roll+0x3a>
    dm_applyTransforms(which);
}

void dm_roll(u08 which, u08 direction, u08 count)
{
    struct _display * disp = &display[which];
 ae8:	c8 2f       	mov	r28, r24
 aea:	d0 e0       	ldi	r29, 0x00	; 0
            break;
        }
        break;

    default:
        switch (direction)
 aec:	6c 36       	cpi	r22, 0x6C	; 108
 aee:	01 f0       	breq	.+0      	; 0xaf0 <dm_roll+0x42>
 af0:	6d 36       	cpi	r22, 0x6D	; 109
 af2:	00 f4       	brcc	.+0      	; 0xaf4 <dm_roll+0x46>
 af4:	64 36       	cpi	r22, 0x64	; 100
 af6:	01 f4       	brne	.+0      	; 0xaf8 <dm_roll+0x4a>
 af8:	00 c0       	rjmp	.+0      	; 0xafa <dm_roll+0x4c>
 afa:	62 37       	cpi	r22, 0x72	; 114
 afc:	01 f0       	breq	.+0      	; 0xafe <dm_roll+0x50>
 afe:	65 37       	cpi	r22, 0x75	; 117
 b00:	01 f4       	brne	.+0      	; 0xb02 <dm_roll+0x54>
        {
        case 'u':
            dm_setTransform(which, TRANSFORM_ROLL_VERT);
 b02:	63 e0       	ldi	r22, 0x03	; 3
 b04:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
            dm_setTransformData(disp, 0, DIR_UP | count);
 b08:	00 61       	ori	r16, 0x10	; 16
 b0a:	00 c0       	rjmp	.+0      	; 0xb0c <dm_roll+0x5e>
            break;

        case 'd':
            dm_setTransform(which, TRANSFORM_ROLL_VERT);
 b0c:	63 e0       	ldi	r22, 0x03	; 3
 b0e:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
            dm_setTransformData(disp, 0, DIR_DOWN | count);
 b12:	00 62       	ori	r16, 0x20	; 32
 b14:	00 c0       	rjmp	.+0      	; 0xb16 <dm_roll+0x68>
            break;

        case 'l':
            dm_setTransform(which, TRANSFORM_ROLL_HORZ);
 b16:	64 e0       	ldi	r22, 0x04	; 4
 b18:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
            dm_setTransformData(disp, 0, DIR_LEFT | count);
 b1c:	00 63       	ori	r16, 0x30	; 48
 b1e:	00 c0       	rjmp	.+0      	; 0xb20 <dm_roll+0x72>
            break;

        case 'r':
            dm_setTransform(which, TRANSFORM_ROLL_HORZ);
 b20:	64 e0       	ldi	r22, 0x04	; 4
 b22:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
            dm_setTransformData(disp, 0, DIR_RIGHT | count);
 b26:	00 64       	ori	r16, 0x40	; 64
    return display->txList[display->txListBookmark + index + 1];
}

static void dm_setTransformData(struct _display * display, u08 index, u08 data)
{
    u08 * dataPtr = &display->txList[display->txListBookmark + index];
 b28:	89 e2       	ldi	r24, 0x29	; 41
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	c8 9f       	mul	r28, r24
 b2e:	f0 01       	movw	r30, r0
 b30:	c9 9f       	mul	r28, r25
 b32:	f0 0d       	add	r31, r0
 b34:	d8 9f       	mul	r29, r24
 b36:	f0 0d       	add	r31, r0
 b38:	11 24       	eor	r1, r1
 b3a:	df 01       	movw	r26, r30
 b3c:	a0 50       	subi	r26, 0x00	; 0
 b3e:	b0 40       	sbci	r27, 0x00	; 0
 b40:	53 96       	adiw	r26, 0x13	; 19
 b42:	8c 91       	ld	r24, X
 b44:	53 97       	sbiw	r26, 0x13	; 19
 b46:	90 e0       	ldi	r25, 0x00	; 0
    if (*dataPtr == TRANSFORM_EOL)
 b48:	a8 0f       	add	r26, r24
 b4a:	b9 1f       	adc	r27, r25
 b4c:	13 96       	adiw	r26, 0x03	; 3
 b4e:	2c 91       	ld	r18, X
 b50:	13 97       	sbiw	r26, 0x03	; 3
 b52:	2f 30       	cpi	r18, 0x0F	; 15
 b54:	01 f4       	brne	.+0      	; 0xb56 <dm_roll+0xa8>
    {
        *dataPtr++ = data;
 b56:	13 96       	adiw	r26, 0x03	; 3
 b58:	0c 93       	st	X, r16
 b5a:	13 97       	sbiw	r26, 0x03	; 3
    return display->txList[display->txListBookmark + index + 1];
}

static void dm_setTransformData(struct _display * display, u08 index, u08 data)
{
    u08 * dataPtr = &display->txList[display->txListBookmark + index];
 b5c:	e8 0f       	add	r30, r24
 b5e:	f9 1f       	adc	r31, r25
 b60:	e0 50       	subi	r30, 0x00	; 0
 b62:	f0 40       	sbci	r31, 0x00	; 0
    if (*dataPtr == TRANSFORM_EOL)
    {
        *dataPtr++ = data;
        *dataPtr = TRANSFORM_EOL;
 b64:	21 83       	std	Z+1, r18	; 0x01
 b66:	00 c0       	rjmp	.+0      	; 0xb68 <dm_roll+0xba>
    }
    else
    {
        *dataPtr = data;
 b68:	13 96       	adiw	r26, 0x03	; 3
 b6a:	0c 93       	st	X, r16
            dm_setTransform(which, TRANSFORM_ROLL_HORZ);
            dm_setTransformData(disp, 0, DIR_RIGHT | count);
            break;
        }
    }
    dm_applyTransforms(which);
 b6c:	81 2f       	mov	r24, r17
 b6e:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
}
 b72:	df 91       	pop	r29
 b74:	cf 91       	pop	r28
 b76:	1f 91       	pop	r17
 b78:	0f 91       	pop	r16
 b7a:	08 95       	ret

00000b7c <dm_setPalette>:
{
/*   cli(); */
#ifdef PALETTE
    display[which].paletteCountdown = PALETTE_COUNTDOWN_INIT;
#endif
    display[which].paletteSelected = index;
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	29 e2       	ldi	r18, 0x29	; 41
 b80:	30 e0       	ldi	r19, 0x00	; 0
 b82:	82 9f       	mul	r24, r18
 b84:	f0 01       	movw	r30, r0
 b86:	83 9f       	mul	r24, r19
 b88:	f0 0d       	add	r31, r0
 b8a:	92 9f       	mul	r25, r18
 b8c:	f0 0d       	add	r31, r0
 b8e:	11 24       	eor	r1, r1
 b90:	e0 50       	subi	r30, 0x00	; 0
 b92:	f0 40       	sbci	r31, 0x00	; 0
 b94:	60 a3       	std	Z+32, r22	; 0x20
/*   sei(); */
}
 b96:	08 95       	ret

00000b98 <dm_reset>:
    } while (count > 0);
}

void dm_reset(u08 which)
{
    display[which].txListBookmark = 0;
 b98:	48 2f       	mov	r20, r24
 b9a:	50 e0       	ldi	r21, 0x00	; 0
 b9c:	29 e2       	ldi	r18, 0x29	; 41
 b9e:	30 e0       	ldi	r19, 0x00	; 0
 ba0:	42 9f       	mul	r20, r18
 ba2:	f0 01       	movw	r30, r0
 ba4:	43 9f       	mul	r20, r19
 ba6:	f0 0d       	add	r31, r0
 ba8:	52 9f       	mul	r21, r18
 baa:	f0 0d       	add	r31, r0
 bac:	11 24       	eor	r1, r1
 bae:	e0 50       	subi	r30, 0x00	; 0
 bb0:	f0 40       	sbci	r31, 0x00	; 0
 bb2:	13 8a       	std	Z+19, r1	; 0x13
    display[which].txList[0] = TRANSFORM_EOL;
 bb4:	9f e0       	ldi	r25, 0x0F	; 15
 bb6:	93 83       	std	Z+3, r25	; 0x03
    dm_applyTransforms(which);
 bb8:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
}
 bbc:	08 95       	ret

00000bbe <dm_progColumn>:

void dm_progColumn(u08 which, u08 column, u08 data)
{
    display[which].progColumn[column] = data;
 bbe:	a8 2f       	mov	r26, r24
 bc0:	b0 e0       	ldi	r27, 0x00	; 0
 bc2:	29 e2       	ldi	r18, 0x29	; 41
 bc4:	30 e0       	ldi	r19, 0x00	; 0
 bc6:	a2 9f       	mul	r26, r18
 bc8:	f0 01       	movw	r30, r0
 bca:	a3 9f       	mul	r26, r19
 bcc:	f0 0d       	add	r31, r0
 bce:	b2 9f       	mul	r27, r18
 bd0:	f0 0d       	add	r31, r0
 bd2:	11 24       	eor	r1, r1
 bd4:	e0 50       	subi	r30, 0x00	; 0
 bd6:	f0 40       	sbci	r31, 0x00	; 0
 bd8:	df 01       	movw	r26, r30
 bda:	a6 0f       	add	r26, r22
 bdc:	b1 1d       	adc	r27, r1
 bde:	54 96       	adiw	r26, 0x14	; 20
 be0:	4c 93       	st	X, r20
 be2:	54 97       	sbiw	r26, 0x14	; 20
    if (display[which].flags & FLAG_PROGCOLS)
 be4:	92 81       	ldd	r25, Z+2	; 0x02
 be6:	94 ff       	sbrs	r25, 4
 be8:	00 c0       	rjmp	.+0      	; 0xbea <dm_progColumn+0x2c>
    {
        dm_applyTransforms(which);
 bea:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
 bee:	08 95       	ret

00000bf0 <dm_pixel>:
    }
}

void dm_pixel(u08 which, u08 set, u08 row, u08 column)
{
 bf0:	a8 2f       	mov	r26, r24
 bf2:	b0 e0       	ldi	r27, 0x00	; 0
 bf4:	30 e0       	ldi	r19, 0x00	; 0
    if (set == 1)
 bf6:	61 30       	cpi	r22, 0x01	; 1
 bf8:	01 f4       	brne	.+0      	; 0xbfa <dm_pixel+0xa>
    {
        display[which].progColumn[column] |= (1 << row);
 bfa:	69 e2       	ldi	r22, 0x29	; 41
 bfc:	70 e0       	ldi	r23, 0x00	; 0
 bfe:	a6 9f       	mul	r26, r22
 c00:	f0 01       	movw	r30, r0
 c02:	a7 9f       	mul	r26, r23
 c04:	f0 0d       	add	r31, r0
 c06:	b6 9f       	mul	r27, r22
 c08:	f0 0d       	add	r31, r0
 c0a:	11 24       	eor	r1, r1
 c0c:	e0 50       	subi	r30, 0x00	; 0
 c0e:	f0 40       	sbci	r31, 0x00	; 0
 c10:	e2 0f       	add	r30, r18
 c12:	f3 1f       	adc	r31, r19
 c14:	21 e0       	ldi	r18, 0x01	; 1
 c16:	30 e0       	ldi	r19, 0x00	; 0
 c18:	00 c0       	rjmp	.+0      	; 0xc1a <dm_pixel+0x2a>
 c1a:	22 0f       	add	r18, r18
 c1c:	33 1f       	adc	r19, r19
 c1e:	4a 95       	dec	r20
 c20:	02 f4       	brpl	.+0      	; 0xc22 <dm_pixel+0x32>
 c22:	94 89       	ldd	r25, Z+20	; 0x14
 c24:	92 2b       	or	r25, r18
 c26:	94 8b       	std	Z+20, r25	; 0x14
 c28:	00 c0       	rjmp	.+0      	; 0xc2a <dm_pixel+0x3a>
    }
    else
    {
        display[which].progColumn[column] &= ~(1 << row);
 c2a:	69 e2       	ldi	r22, 0x29	; 41
 c2c:	70 e0       	ldi	r23, 0x00	; 0
 c2e:	a6 9f       	mul	r26, r22
 c30:	f0 01       	movw	r30, r0
 c32:	a7 9f       	mul	r26, r23
 c34:	f0 0d       	add	r31, r0
 c36:	b6 9f       	mul	r27, r22
 c38:	f0 0d       	add	r31, r0
 c3a:	11 24       	eor	r1, r1
 c3c:	e0 50       	subi	r30, 0x00	; 0
 c3e:	f0 40       	sbci	r31, 0x00	; 0
 c40:	e2 0f       	add	r30, r18
 c42:	f3 1f       	adc	r31, r19
 c44:	21 e0       	ldi	r18, 0x01	; 1
 c46:	30 e0       	ldi	r19, 0x00	; 0
 c48:	00 c0       	rjmp	.+0      	; 0xc4a <dm_pixel+0x5a>
 c4a:	22 0f       	add	r18, r18
 c4c:	33 1f       	adc	r19, r19
 c4e:	4a 95       	dec	r20
 c50:	02 f4       	brpl	.+0      	; 0xc52 <dm_pixel+0x62>
 c52:	20 95       	com	r18
 c54:	94 89       	ldd	r25, Z+20	; 0x14
 c56:	29 23       	and	r18, r25
 c58:	24 8b       	std	Z+20, r18	; 0x14
    }
    if (display[which].flags & FLAG_PROGCOLS)
 c5a:	48 2f       	mov	r20, r24
 c5c:	50 e0       	ldi	r21, 0x00	; 0
 c5e:	29 e2       	ldi	r18, 0x29	; 41
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	42 9f       	mul	r20, r18
 c64:	f0 01       	movw	r30, r0
 c66:	43 9f       	mul	r20, r19
 c68:	f0 0d       	add	r31, r0
 c6a:	52 9f       	mul	r21, r18
 c6c:	f0 0d       	add	r31, r0
 c6e:	11 24       	eor	r1, r1
 c70:	e0 50       	subi	r30, 0x00	; 0
 c72:	f0 40       	sbci	r31, 0x00	; 0
 c74:	92 81       	ldd	r25, Z+2	; 0x02
 c76:	94 ff       	sbrs	r25, 4
 c78:	00 c0       	rjmp	.+0      	; 0xc7a <dm_pixel+0x8a>
    {
        dm_applyTransforms(which);
 c7a:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
 c7e:	08 95       	ret

00000c80 <dm_copyToCustom>:

void dm_copyToCustom(u08 which, u08 charIndex)
{
    u08 count;
    struct _display * disp = &display[which];
    u08 * dataPtr = font5x7 + (charIndex * NUM_COLUMNS);
 c80:	95 e0       	ldi	r25, 0x05	; 5
 c82:	69 9f       	mul	r22, r25
 c84:	b0 01       	movw	r22, r0
 c86:	11 24       	eor	r1, r1
 c88:	60 50       	subi	r22, 0x00	; 0
 c8a:	70 40       	sbci	r23, 0x00	; 0


void dm_copyToCustom(u08 which, u08 charIndex)
{
    u08 count;
    struct _display * disp = &display[which];
 c8c:	48 2f       	mov	r20, r24
 c8e:	50 e0       	ldi	r21, 0x00	; 0
        dm_applyTransforms(which);
    }
}


void dm_copyToCustom(u08 which, u08 charIndex)
 c90:	29 e2       	ldi	r18, 0x29	; 41
 c92:	30 e0       	ldi	r19, 0x00	; 0
 c94:	42 9f       	mul	r20, r18
 c96:	d0 01       	movw	r26, r0
 c98:	43 9f       	mul	r20, r19
 c9a:	b0 0d       	add	r27, r0
 c9c:	52 9f       	mul	r21, r18
 c9e:	b0 0d       	add	r27, r0
 ca0:	11 24       	eor	r1, r1
 ca2:	a0 50       	subi	r26, 0x00	; 0
 ca4:	b0 40       	sbci	r27, 0x00	; 0
 ca6:	20 e0       	ldi	r18, 0x00	; 0
 ca8:	30 e0       	ldi	r19, 0x00	; 0
    struct _display * disp = &display[which];
    u08 * dataPtr = font5x7 + (charIndex * NUM_COLUMNS);

    for (count = 0; count < NUM_COLUMNS; count++)
    {
        disp->progColumn[count] = pgm_read_byte_near(dataPtr++);
 caa:	fb 01       	movw	r30, r22
 cac:	e2 0f       	add	r30, r18
 cae:	f3 1f       	adc	r31, r19
 cb0:	e4 91       	lpm	r30, Z+
 cb2:	ed 93       	st	X+, r30
 cb4:	2f 5f       	subi	r18, 0xFF	; 255
 cb6:	3f 4f       	sbci	r19, 0xFF	; 255
{
    u08 count;
    struct _display * disp = &display[which];
    u08 * dataPtr = font5x7 + (charIndex * NUM_COLUMNS);

    for (count = 0; count < NUM_COLUMNS; count++)
 cb8:	25 30       	cpi	r18, 0x05	; 5
 cba:	31 05       	cpc	r19, r1
 cbc:	01 f4       	brne	.+0      	; 0xcbe <dm_copyToCustom+0x3e>
    {
        disp->progColumn[count] = pgm_read_byte_near(dataPtr++);
    }
    dm_applyTransforms(which);
 cbe:	0e 94 00 00 	call	0	; 0x0 <dm_setTransform>
}
 cc2:	08 95       	ret

00000cc4 <dm_setsense>:
void dm_setsense(u08 row, u08 column)
{
    extern u08 * sensePort;
    extern u08 * senseBit;

    if ('X' == column)
 cc4:	68 35       	cpi	r22, 0x58	; 88
 cc6:	01 f4       	brne	.+0      	; 0xcc8 <dm_setsense+0x4>
    {
/* disable the timer interrupt */
        TIMSK0 &= ~_BV(TOIE0);
 cc8:	80 91 6e 00 	lds	r24, 0x006E
 ccc:	8e 7f       	andi	r24, 0xFE	; 254
 cce:	80 93 6e 00 	sts	0x006E, r24
/* senseport = PORTX, senseport -1 = DDRX */
        *(sensePort - 1) &= ~_BV(*senseBit); /* set column driver to input */
 cd2:	e0 91 00 00 	lds	r30, 0x0000
 cd6:	f0 91 00 00 	lds	r31, 0x0000
 cda:	a0 91 00 00 	lds	r26, 0x0000
 cde:	b0 91 00 00 	lds	r27, 0x0000
 ce2:	81 e0       	ldi	r24, 0x01	; 1
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	0c 90       	ld	r0, X
 ce8:	00 c0       	rjmp	.+0      	; 0xcea <dm_setsense+0x26>
 cea:	88 0f       	add	r24, r24
 cec:	99 1f       	adc	r25, r25
 cee:	0a 94       	dec	r0
 cf0:	02 f4       	brpl	.+0      	; 0xcf2 <dm_setsense+0x2e>
 cf2:	80 95       	com	r24
 cf4:	92 91       	ld	r25, -Z
 cf6:	98 23       	and	r25, r24
 cf8:	90 83       	st	Z, r25
        display[0].senseRowColumn = 0xff;
 cfa:	8f ef       	ldi	r24, 0xFF	; 255
 cfc:	80 93 00 00 	sts	0x0000, r24
        display[1].senseRowColumn = 0xff;
 d00:	80 93 00 00 	sts	0x0000, r24
        return;
 d04:	08 95       	ret
    }
    if (column <= 4)
 d06:	65 30       	cpi	r22, 0x05	; 5
 d08:	00 f4       	brcc	.+0      	; 0xd0a <dm_setsense+0x46>
    {
        display[0].senseRowColumn = (row << 4) | column;
 d0a:	82 95       	swap	r24
 d0c:	80 7f       	andi	r24, 0xF0	; 240
 d0e:	86 2b       	or	r24, r22
 d10:	80 93 00 00 	sts	0x0000, r24
        sensePort = pgm_read_byte_near(&columnCtl[0][column].port);
 d14:	70 e0       	ldi	r23, 0x00	; 0
 d16:	cb 01       	movw	r24, r22
 d18:	88 0f       	add	r24, r24
 d1a:	99 1f       	adc	r25, r25
 d1c:	86 0f       	add	r24, r22
 d1e:	97 1f       	adc	r25, r23
 d20:	fc 01       	movw	r30, r24
 d22:	e0 50       	subi	r30, 0x00	; 0
 d24:	f0 40       	sbci	r31, 0x00	; 0
 d26:	e4 91       	lpm	r30, Z+
 d28:	e0 93 00 00 	sts	0x0000, r30
 d2c:	10 92 00 00 	sts	0x0000, r1
        senseBit = pgm_read_byte_near(&columnCtl[0][column].pin);
 d30:	80 50       	subi	r24, 0x00	; 0
 d32:	90 40       	sbci	r25, 0x00	; 0
 d34:	fc 01       	movw	r30, r24
 d36:	84 91       	lpm	r24, Z+
 d38:	00 c0       	rjmp	.+0      	; 0xd3a <dm_setsense+0x76>
    }
    else if (column >= 5 && column <= 9)
 d3a:	96 2f       	mov	r25, r22
 d3c:	95 50       	subi	r25, 0x05	; 5
 d3e:	95 30       	cpi	r25, 0x05	; 5
 d40:	00 f4       	brcc	.+0      	; 0xd42 <dm_setsense+0x7e>
    {
        display[1].senseRowColumn = (row << 4) | column;
 d42:	82 95       	swap	r24
 d44:	80 7f       	andi	r24, 0xF0	; 240
 d46:	86 2b       	or	r24, r22
 d48:	80 93 00 00 	sts	0x0000, r24
        sensePort = pgm_read_byte_near(&columnCtl[1][column - 5].port);
 d4c:	70 e0       	ldi	r23, 0x00	; 0
 d4e:	65 50       	subi	r22, 0x05	; 5
 d50:	70 40       	sbci	r23, 0x00	; 0
 d52:	cb 01       	movw	r24, r22
 d54:	88 0f       	add	r24, r24
 d56:	99 1f       	adc	r25, r25
 d58:	86 0f       	add	r24, r22
 d5a:	97 1f       	adc	r25, r23
 d5c:	fc 01       	movw	r30, r24
 d5e:	e0 50       	subi	r30, 0x00	; 0
 d60:	f0 40       	sbci	r31, 0x00	; 0
 d62:	e4 91       	lpm	r30, Z+
 d64:	e0 93 00 00 	sts	0x0000, r30
 d68:	10 92 00 00 	sts	0x0000, r1
        senseBit = pgm_read_byte_near(&columnCtl[1][column - 5].pin);
 d6c:	80 50       	subi	r24, 0x00	; 0
 d6e:	90 40       	sbci	r25, 0x00	; 0
 d70:	fc 01       	movw	r30, r24
 d72:	84 91       	lpm	r24, Z+
 d74:	80 93 00 00 	sts	0x0000, r24
 d78:	10 92 00 00 	sts	0x0000, r1
    }
    /* senseport = PORTX, senseport -1 = DDRX */
    *(sensePort - 1) |= _BV(*senseBit); /* set column driver to output */
 d7c:	e0 91 00 00 	lds	r30, 0x0000
 d80:	f0 91 00 00 	lds	r31, 0x0000
 d84:	a0 91 00 00 	lds	r26, 0x0000
 d88:	b0 91 00 00 	lds	r27, 0x0000
 d8c:	81 e0       	ldi	r24, 0x01	; 1
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	0c 90       	ld	r0, X
 d92:	00 c0       	rjmp	.+0      	; 0xd94 <dm_setsense+0xd0>
 d94:	88 0f       	add	r24, r24
 d96:	99 1f       	adc	r25, r25
 d98:	0a 94       	dec	r0
 d9a:	02 f4       	brpl	.+0      	; 0xd9c <dm_setsense+0xd8>
 d9c:	22 91       	ld	r18, -Z
 d9e:	28 2b       	or	r18, r24
 da0:	20 83       	st	Z, r18
    /* enable the timer interrupt */
    TIMSK0 |= _BV(TOIE0);
 da2:	80 91 6e 00 	lds	r24, 0x006E
 da6:	81 60       	ori	r24, 0x01	; 1
 da8:	80 93 6e 00 	sts	0x006E, r24
 dac:	08 95       	ret
