
VideoThrowie.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ee  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000223  2**0
                  ALLOC
  3 .debug_abbrev 0000015b  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004a7  00000000  00000000  0000037e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000004d1  00000000  00000000  00000825  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000cf8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_loc    00000800  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000050  00000000  00000000  00001548  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_pubtypes 0000002b  00000000  00000000  00001598  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  000015c3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  000015e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000112  00000000  00000000  000017c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <delayMs>:

// /usr/local?CrossPack-AVR/include/avr


void delayMs(unsigned char ms, unsigned char repeat)
{
   0:	26 2f       	mov	r18, r22
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	60 ef       	ldi	r22, 0xF0	; 240
   6:	70 e0       	ldi	r23, 0x00	; 0
   8:	00 d0       	rcall	.+0      	; 0xa <delayMs+0xa>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
   a:	fc 01       	movw	r30, r24
   c:	31 97       	sbiw	r30, 0x01	; 1
   e:	01 f4       	brne	.+0      	; 0x10 <delayMs+0x10>
    do
    {
        _delay_loop_2(ms * 240);
    } while (--repeat);
  10:	21 50       	subi	r18, 0x01	; 1
  12:	01 f4       	brne	.+0      	; 0x14 <delayMs+0x14>
}
  14:	08 95       	ret

00000016 <__vector_5>:
#define INTERVAL_INIT (30 << 2) // 30s in 250ms intervals

volatile unsigned char interval = INTERVAL_INIT; // 250ms units 

ISR(TIMER0_OVF_vect) // Called ~250ms
{
  16:	1f 92       	push	r1
  18:	0f 92       	push	r0
  1a:	0f b6       	in	r0, 0x3f	; 63
  1c:	0f 92       	push	r0
  1e:	11 24       	eor	r1, r1
  20:	8f 93       	push	r24
    if (interval)
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	88 23       	and	r24, r24
  28:	01 f0       	breq	.+0      	; 0x2a <__vector_5+0x14>
    {
        interval--;
  2a:	80 91 00 00 	lds	r24, 0x0000
  2e:	81 50       	subi	r24, 0x01	; 1
  30:	80 93 00 00 	sts	0x0000, r24
    }
}
  34:	8f 91       	pop	r24
  36:	0f 90       	pop	r0
  38:	0f be       	out	0x3f, r0	; 63
  3a:	0f 90       	pop	r0
  3c:	1f 90       	pop	r1
  3e:	18 95       	reti

00000040 <flashLed>:

void flashLed(void)
{
    DDRB |= POWER;
  40:	bb 9a       	sbi	0x17, 3	; 23
    unsigned char ii;
    for (ii = 0; ii < 5; ii++)
    {
        PORTB |= POWER;
  42:	c3 9a       	sbi	0x18, 3	; 24
  44:	80 ec       	ldi	r24, 0xC0	; 192
  46:	9d e5       	ldi	r25, 0x5D	; 93
  48:	fc 01       	movw	r30, r24
  4a:	31 97       	sbiw	r30, 0x01	; 1
  4c:	01 f4       	brne	.+0      	; 0x4e <flashLed+0xe>
        delayMs(100, 1);
        PORTB &= ~POWER;
  4e:	c3 98       	cbi	0x18, 3	; 24
  50:	fc 01       	movw	r30, r24
  52:	31 97       	sbiw	r30, 0x01	; 1
  54:	01 f4       	brne	.+0      	; 0x56 <flashLed+0x16>
{
    DDRB |= POWER;
    unsigned char ii;
    for (ii = 0; ii < 5; ii++)
    {
        PORTB |= POWER;
  56:	c3 9a       	sbi	0x18, 3	; 24
  58:	fc 01       	movw	r30, r24
  5a:	31 97       	sbiw	r30, 0x01	; 1
  5c:	01 f4       	brne	.+0      	; 0x5e <flashLed+0x1e>
        delayMs(100, 1);
        PORTB &= ~POWER;
  5e:	c3 98       	cbi	0x18, 3	; 24
  60:	fc 01       	movw	r30, r24
  62:	31 97       	sbiw	r30, 0x01	; 1
  64:	01 f4       	brne	.+0      	; 0x66 <flashLed+0x26>
{
    DDRB |= POWER;
    unsigned char ii;
    for (ii = 0; ii < 5; ii++)
    {
        PORTB |= POWER;
  66:	c3 9a       	sbi	0x18, 3	; 24
  68:	fc 01       	movw	r30, r24
  6a:	31 97       	sbiw	r30, 0x01	; 1
  6c:	01 f4       	brne	.+0      	; 0x6e <flashLed+0x2e>
        delayMs(100, 1);
        PORTB &= ~POWER;
  6e:	c3 98       	cbi	0x18, 3	; 24
  70:	fc 01       	movw	r30, r24
  72:	31 97       	sbiw	r30, 0x01	; 1
  74:	01 f4       	brne	.+0      	; 0x76 <flashLed+0x36>
{
    DDRB |= POWER;
    unsigned char ii;
    for (ii = 0; ii < 5; ii++)
    {
        PORTB |= POWER;
  76:	c3 9a       	sbi	0x18, 3	; 24
  78:	fc 01       	movw	r30, r24
  7a:	31 97       	sbiw	r30, 0x01	; 1
  7c:	01 f4       	brne	.+0      	; 0x7e <flashLed+0x3e>
        delayMs(100, 1);
        PORTB &= ~POWER;
  7e:	c3 98       	cbi	0x18, 3	; 24
  80:	fc 01       	movw	r30, r24
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	01 f4       	brne	.+0      	; 0x86 <flashLed+0x46>
{
    DDRB |= POWER;
    unsigned char ii;
    for (ii = 0; ii < 5; ii++)
    {
        PORTB |= POWER;
  86:	c3 9a       	sbi	0x18, 3	; 24
  88:	fc 01       	movw	r30, r24
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	01 f4       	brne	.+0      	; 0x8e <flashLed+0x4e>
        delayMs(100, 1);
        PORTB &= ~POWER;
  8e:	c3 98       	cbi	0x18, 3	; 24
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	01 f4       	brne	.+0      	; 0x94 <flashLed+0x54>
        delayMs(100, 1);
    }
    DDRB &= ~POWER;
  94:	bb 98       	cbi	0x17, 3	; 23
}
  96:	08 95       	ret

00000098 <main>:

main(void)
{
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	0f 92       	push	r0
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	20 ec       	ldi	r18, 0xC0	; 192
  a4:	3d e5       	ldi	r19, 0x5D	; 93
  a6:	40 ee       	ldi	r20, 0xE0	; 224
  a8:	5e e2       	ldi	r21, 0x2E	; 46
        sei();

        volatile unsigned char breakit = 0;
        while (!breakit)
        {
            interval = INTERVAL_INIT;
  aa:	68 e7       	ldi	r22, 0x78	; 120
            while (interval) // wait for timer to expire
            {
                if (PINB & POWER)
                {
                    flashLed();
                    breakit = 1;
  ac:	71 e0       	ldi	r23, 0x01	; 1

main(void)
{
    while (1)
    {
        while (!(PINB & POWER)); // wait for a power button keypress
  ae:	b3 9b       	sbis	0x16, 3	; 22
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x1a>
  b2:	c9 01       	movw	r24, r18
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	01 f4       	brne	.+0      	; 0xb8 <main+0x20>
    }
}

void flashLed(void)
{
    DDRB |= POWER;
  b8:	bb 9a       	sbi	0x17, 3	; 23
    unsigned char ii;
    for (ii = 0; ii < 5; ii++)
    {
        PORTB |= POWER;
  ba:	c3 9a       	sbi	0x18, 3	; 24
  bc:	c9 01       	movw	r24, r18
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	01 f4       	brne	.+0      	; 0xc2 <main+0x2a>
        delayMs(100, 1);
        PORTB &= ~POWER;
  c2:	c3 98       	cbi	0x18, 3	; 24
  c4:	c9 01       	movw	r24, r18
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	01 f4       	brne	.+0      	; 0xca <main+0x32>
{
    DDRB |= POWER;
    unsigned char ii;
    for (ii = 0; ii < 5; ii++)
    {
        PORTB |= POWER;
  ca:	c3 9a       	sbi	0x18, 3	; 24
  cc:	c9 01       	movw	r24, r18
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	01 f4       	brne	.+0      	; 0xd2 <main+0x3a>
        delayMs(100, 1);
        PORTB &= ~POWER;
  d2:	c3 98       	cbi	0x18, 3	; 24
  d4:	c9 01       	movw	r24, r18
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	01 f4       	brne	.+0      	; 0xda <main+0x42>
{
    DDRB |= POWER;
    unsigned char ii;
    for (ii = 0; ii < 5; ii++)
    {
        PORTB |= POWER;
  da:	c3 9a       	sbi	0x18, 3	; 24
  dc:	c9 01       	movw	r24, r18
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	01 f4       	brne	.+0      	; 0xe2 <main+0x4a>
        delayMs(100, 1);
        PORTB &= ~POWER;
  e2:	c3 98       	cbi	0x18, 3	; 24
  e4:	c9 01       	movw	r24, r18
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	01 f4       	brne	.+0      	; 0xea <main+0x52>
{
    DDRB |= POWER;
    unsigned char ii;
    for (ii = 0; ii < 5; ii++)
    {
        PORTB |= POWER;
  ea:	c3 9a       	sbi	0x18, 3	; 24
  ec:	c9 01       	movw	r24, r18
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	01 f4       	brne	.+0      	; 0xf2 <main+0x5a>
        delayMs(100, 1);
        PORTB &= ~POWER;
  f2:	c3 98       	cbi	0x18, 3	; 24
  f4:	c9 01       	movw	r24, r18
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	01 f4       	brne	.+0      	; 0xfa <main+0x62>
{
    DDRB |= POWER;
    unsigned char ii;
    for (ii = 0; ii < 5; ii++)
    {
        PORTB |= POWER;
  fa:	c3 9a       	sbi	0x18, 3	; 24
  fc:	c9 01       	movw	r24, r18
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	01 f4       	brne	.+0      	; 0x102 <main+0x6a>
        delayMs(100, 1);
        PORTB &= ~POWER;
 102:	c3 98       	cbi	0x18, 3	; 24
 104:	c9 01       	movw	r24, r18
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	01 f4       	brne	.+0      	; 0x10a <main+0x72>
        delayMs(100, 1);
    }
    DDRB &= ~POWER;
 10a:	bb 98       	cbi	0x17, 3	; 23
 10c:	ee e1       	ldi	r30, 0x1E	; 30
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	01 f4       	brne	.+0      	; 0x114 <main+0x7c>
 114:	e1 50       	subi	r30, 0x01	; 1
void delayMs(unsigned char ms, unsigned char repeat)
{
    do
    {
        _delay_loop_2(ms * 240);
    } while (--repeat);
 116:	01 f4       	brne	.+0      	; 0x118 <main+0x80>
        delayMs(100, 1);
        flashLed();

        delayMs(100, 30); // 100ms * 30 times = 3s

        TCNT0 = 0;
 118:	12 be       	out	0x32, r1	; 50
        TCCR0B |= (_BV(CS00) | _BV(CS02));    // clock enabled, /1024
 11a:	83 b7       	in	r24, 0x33	; 51
 11c:	85 60       	ori	r24, 0x05	; 5
 11e:	83 bf       	out	0x33, r24	; 51
        TIMSK |= _BV(TOIE0);         // timer 0 overflow
 120:	89 b7       	in	r24, 0x39	; 57
 122:	82 60       	ori	r24, 0x02	; 2
 124:	89 bf       	out	0x39, r24	; 57
        sei();
 126:	78 94       	sei

        volatile unsigned char breakit = 0;
 128:	19 82       	std	Y+1, r1	; 0x01
        while (!breakit)
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	88 23       	and	r24, r24
 12e:	01 f0       	breq	.+0      	; 0x130 <main+0x98>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x9a>
        {
            interval = INTERVAL_INIT;
 132:	60 93 00 00 	sts	0x0000, r22
            // Power On
            DDRB |= (POWER | SHUTTER);
 136:	87 b3       	in	r24, 0x17	; 23
 138:	88 61       	ori	r24, 0x18	; 24
 13a:	87 bb       	out	0x17, r24	; 23
            PORTB |= POWER;
 13c:	c3 9a       	sbi	0x18, 3	; 24
 13e:	c9 01       	movw	r24, r18
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	01 f4       	brne	.+0      	; 0x144 <main+0xac>
 144:	c9 01       	movw	r24, r18
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	01 f4       	brne	.+0      	; 0x14a <main+0xb2>
 14a:	c9 01       	movw	r24, r18
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	01 f4       	brne	.+0      	; 0x150 <main+0xb8>
 150:	c9 01       	movw	r24, r18
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	01 f4       	brne	.+0      	; 0x156 <main+0xbe>
 156:	c9 01       	movw	r24, r18
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	01 f4       	brne	.+0      	; 0x15c <main+0xc4>
 15c:	c9 01       	movw	r24, r18
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	01 f4       	brne	.+0      	; 0x162 <main+0xca>
 162:	c9 01       	movw	r24, r18
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	01 f4       	brne	.+0      	; 0x168 <main+0xd0>
 168:	c9 01       	movw	r24, r18
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	01 f4       	brne	.+0      	; 0x16e <main+0xd6>
 16e:	c9 01       	movw	r24, r18
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	01 f4       	brne	.+0      	; 0x174 <main+0xdc>
 174:	c9 01       	movw	r24, r18
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	01 f4       	brne	.+0      	; 0x17a <main+0xe2>
 17a:	c9 01       	movw	r24, r18
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	01 f4       	brne	.+0      	; 0x180 <main+0xe8>
 180:	c9 01       	movw	r24, r18
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	01 f4       	brne	.+0      	; 0x186 <main+0xee>
 186:	c9 01       	movw	r24, r18
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	01 f4       	brne	.+0      	; 0x18c <main+0xf4>
            delayMs(100, 13); // 100ms * 13 times = 1.3s
            PORTB &= ~POWER;
 18c:	c3 98       	cbi	0x18, 3	; 24

            WAIT_TIL_LED_OFF;
 18e:	b2 9b       	sbis	0x16, 2	; 22
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0xfa>
            WAIT_TIL_LED_ON;
 192:	b2 99       	sbic	0x16, 2	; 22
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0xfe>
 196:	c9 01       	movw	r24, r18
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	01 f4       	brne	.+0      	; 0x19c <main+0x104>

            // Shutter
            delayMs(100, 1); // 100ms
            PORTB |= SHUTTER;
 19c:	c4 9a       	sbi	0x18, 4	; 24
 19e:	ca 01       	movw	r24, r20
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	01 f4       	brne	.+0      	; 0x1a4 <main+0x10c>
            delayMs(50, 1); // 50ms
            PORTB &= ~SHUTTER;
 1a4:	c4 98       	cbi	0x18, 4	; 24
            WAIT_TIL_LED_OFF;
 1a6:	b2 9b       	sbis	0x16, 2	; 22
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x112>

            // Power Off
            WAIT_TIL_LED_ON;
 1aa:	b2 99       	sbic	0x16, 2	; 22
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x116>
 1ae:	c9 01       	movw	r24, r18
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	01 f4       	brne	.+0      	; 0x1b4 <main+0x11c>
            delayMs(100, 1);
            PORTB |= POWER;
 1b4:	c3 9a       	sbi	0x18, 3	; 24
            WAIT_TIL_LED_OFF;
 1b6:	b2 9b       	sbis	0x16, 2	; 22
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x122>
            PORTB &= ~POWER;
 1ba:	c3 98       	cbi	0x18, 3	; 24
            DDRB &= ~(POWER | SHUTTER);
 1bc:	87 b3       	in	r24, 0x17	; 23
 1be:	87 7e       	andi	r24, 0xE7	; 231
 1c0:	87 bb       	out	0x17, r24	; 23

            while (interval) // wait for timer to expire
 1c2:	80 91 00 00 	lds	r24, 0x0000
 1c6:	88 23       	and	r24, r24
 1c8:	01 f4       	brne	.+0      	; 0x1ca <main+0x132>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x134>
            {
                if (PINB & POWER)
 1cc:	b3 9b       	sbis	0x16, 3	; 22
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x138>
    }
}

void flashLed(void)
{
    DDRB |= POWER;
 1d0:	bb 9a       	sbi	0x17, 3	; 23
 1d2:	e5 e0       	ldi	r30, 0x05	; 5
    unsigned char ii;
    for (ii = 0; ii < 5; ii++)
    {
        PORTB |= POWER;
 1d4:	c3 9a       	sbi	0x18, 3	; 24
 1d6:	c9 01       	movw	r24, r18
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	01 f4       	brne	.+0      	; 0x1dc <main+0x144>
        delayMs(100, 1);
        PORTB &= ~POWER;
 1dc:	c3 98       	cbi	0x18, 3	; 24
 1de:	c9 01       	movw	r24, r18
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	01 f4       	brne	.+0      	; 0x1e4 <main+0x14c>
 1e4:	e1 50       	subi	r30, 0x01	; 1

void flashLed(void)
{
    DDRB |= POWER;
    unsigned char ii;
    for (ii = 0; ii < 5; ii++)
 1e6:	01 f4       	brne	.+0      	; 0x1e8 <main+0x150>
        PORTB |= POWER;
        delayMs(100, 1);
        PORTB &= ~POWER;
        delayMs(100, 1);
    }
    DDRB &= ~POWER;
 1e8:	bb 98       	cbi	0x17, 3	; 23
            while (interval) // wait for timer to expire
            {
                if (PINB & POWER)
                {
                    flashLed();
                    breakit = 1;
 1ea:	79 83       	std	Y+1, r23	; 0x01
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x156>
